
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Font;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Vector;
import javax.swing.DefaultListCellRenderer;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Sammy Guergachi <sguergachi at gmail.com>
 */
public class AdminPanel extends javax.swing.JFrame {

    /**
     * Creates new form AdminPanel
     */
    CardLayout cards;
    public AdminPanel() {
        setIconImage(new ImageIcon("src\\res\\patient.png").getImage());
        initComponents();
        cards = (CardLayout)(MainCards.getLayout());
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        updateComboBoxes();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        Sex = new javax.swing.ButtonGroup();
        RecordAddedVerifier = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        AddRecordButton = new javax.swing.JButton();
        NotFoundPopUp = new javax.swing.JDialog();
        jPanel7 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        notFoundButton = new javax.swing.JButton();
        ConfirmDeletePopUp = new javax.swing.JDialog();
        jPanel31 = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        jPanel32 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        CancelDelete = new javax.swing.JButton();
        jLabel30 = new javax.swing.JLabel();
        ConfirmDelete = new javax.swing.JButton();
        UpdateRecordDialogPopUp = new javax.swing.JDialog();
        jPanel14 = new javax.swing.JPanel();
        PatientNameLabel1 = new javax.swing.JLabel();
        UpdatePatientNameField = new javax.swing.JTextField();
        FatherNameLabel1 = new javax.swing.JLabel();
        DOB = new javax.swing.JTextField();
        DateofBirthLabel1 = new javax.swing.JLabel();
        Gender1 = new javax.swing.JLabel();
        DoctorNameLabel1 = new javax.swing.JLabel();
        DiseaseHistroyLabel1 = new javax.swing.JLabel();
        UpdateDiseaseHistroyField = new javax.swing.JScrollPane();
        Disease_Histroy1 = new javax.swing.JTextArea();
        PrescriptionLabel1 = new javax.swing.JLabel();
        UpdatePrescriptionField = new javax.swing.JScrollPane();
        Prescription1 = new javax.swing.JTextArea();
        CancelPatientUpdate = new MyButton();
        UpdatePatientRecordButton = new MyButton();
        UpdateFatherNameField1 = new javax.swing.JTextField();
        UpdateFatherNameField = new javax.swing.JTextField();
        gender = new javax.swing.JTextField();
        ConfirmUpdatePopUp = new javax.swing.JDialog();
        jPanel35 = new javax.swing.JPanel();
        jLabel33 = new javax.swing.JLabel();
        jPanel36 = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        CancelUpdate = new javax.swing.JButton();
        jLabel35 = new javax.swing.JLabel();
        ConfirmUpdate = new javax.swing.JButton();
        UpdateDoctorDialogPopUp = new javax.swing.JDialog();
        ADCDoctorNameField1 = new javax.swing.JPanel();
        addDoc_DoctorNameField1 = new javax.swing.JTextField();
        FieldofSpecializationLabel1 = new javax.swing.JLabel();
        SaveDoctor1 = new MyButton();
        CancelDoctor1 = new MyButton();
        ADCDoctorNameLabel3 = new javax.swing.JLabel();
        FieldofSpecializationField1 = new javax.swing.JComboBox<>();
        Welcome = new javax.swing.JPanel();
        ToolBar = new javax.swing.JPanel();
        ToolBarButtons = new javax.swing.JPanel();
        AddNewPatientButton = new MyButton();
        jSeparator5 = new javax.swing.JSeparator();
        SearchPatientRecordButton = new MyButton();
        jSeparator6 = new javax.swing.JSeparator();
        AddNewDoctorButton = new MyButton();
        jSeparator7 = new javax.swing.JSeparator();
        PrintButton = new MyButton();
        jPanel37 = new javax.swing.JPanel();
        Update_Patient = new MyButton();
        Delete_PatientRecordButton = new MyButton();
        LogOutButton = new javax.swing.JPanel();
        LogOut = new MyButton();
        MainCards = new javax.swing.JPanel();
        GC = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        APC = new javax.swing.JPanel();
        Left = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Right = new javax.swing.JPanel();
        PatientNameLabel = new javax.swing.JLabel();
        PatientNameField = new javax.swing.JTextField();
        FatherNameLabel = new javax.swing.JLabel();
        FatherNameField = new javax.swing.JTextField();
        Gender = new javax.swing.JLabel();
        DateofBirthLabel = new javax.swing.JLabel();
        DateofBirthField = new com.toedter.calendar.JDateChooser();
        Female = new javax.swing.JRadioButton();
        Male = new javax.swing.JRadioButton();
        DoctorNameLabel = new javax.swing.JLabel();
        DoctorNameField = new javax.swing.JComboBox<>();
        DiseaseHistroyLabel = new javax.swing.JLabel();
        PrescriptionField = new javax.swing.JScrollPane();
        Prescription = new javax.swing.JTextArea();
        PrescriptionLabel = new javax.swing.JLabel();
        DiseaseHistroyField = new javax.swing.JScrollPane();
        Disease_Histroy = new javax.swing.JTextArea();
        SavePatient = new MyButton();
        CancelPatient = new MyButton();
        ADocC = new javax.swing.JPanel();
        ADCleft = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        ADCDoctorNameLabel = new javax.swing.JLabel();
        ADCDoctorNameField = new javax.swing.JPanel();
        addDoc_DoctorNameField = new javax.swing.JTextField();
        FieldofSpecializationLabel = new javax.swing.JLabel();
        SaveDoctor = new MyButton();
        CancelDoctor = new MyButton();
        ADCDoctorNameLabel2 = new javax.swing.JLabel();
        FieldofSpecializationField = new javax.swing.JComboBox<>();
        ADisC = new javax.swing.JPanel();
        ADisLeft = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        ADisRight = new javax.swing.JPanel();
        ADisC_DiseaseNameLabel = new javax.swing.JLabel();
        ADisC_DiseaseNameField = new javax.swing.JTextField();
        ADisC_DiseaseDescriptionLabel = new javax.swing.JLabel();
        DiseaseHistroyField1 = new javax.swing.JScrollPane();
        ADisC_DiseaseDescriptionField = new javax.swing.JTextArea();
        SaveDisease = new MyButton();
        CancelDisease = new MyButton();
        SearchRecordByNamePanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        SearchByNameLabel = new javax.swing.JLabel();
        SearchByNameField = new javax.swing.JTextField();
        SearchPatientByNameButton = new MyButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        SearchByNameTable = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        SearchRecordByIDPanel = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        SearchRecordByIDLabel = new javax.swing.JLabel();
        SearchByIDField = new javax.swing.JTextField();
        SearchRecordByIDButton = new MyButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        SearchRecordByIDTable = new javax.swing.JTable();
        jPanel10 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        SearchRecordByAgePanel = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        SearchRecordByAgeLabel = new javax.swing.JLabel();
        SearchByAgeField = new javax.swing.JTextField();
        SearchRecordByAgeButton = new MyButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        SearchRecordByAgeTable = new javax.swing.JTable();
        jPanel13 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        SearchRecordByDiseaseNamePanel = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        SearchRecordByDiseaseNaemLabel = new javax.swing.JLabel();
        SearchByDiseaseNameField = new javax.swing.JTextField();
        SearchByDiseaseNameFieldButton = new MyButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        SearchRecordByDiseaseNameTable = new javax.swing.JTable();
        jPanel17 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        SearchRecordByDoctorNamePanel = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        SearchRecordByDiseaseNaemLabel1 = new javax.swing.JLabel();
        SearchByDoctorNameField = new javax.swing.JTextField();
        SearchByDoctorNameFieldButton = new MyButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        SearchRecordByDoctorNameTable = new javax.swing.JTable();
        jPanel20 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        SearchDoctorbyNamePanel = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        SearchRecordByDiseaseNaemLabel2 = new javax.swing.JLabel();
        SearchDoctorByNameField = new javax.swing.JTextField();
        SearchDoctorByNameFieldButton = new MyButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        SearchDoctorByNameTable = new javax.swing.JTable();
        jPanel23 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        SearchDoctorbyFieldPanel = new javax.swing.JPanel();
        jPanel24 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        SearchRecordByDiseaseNaemLabel3 = new javax.swing.JLabel();
        SearchDoctorByField = new javax.swing.JTextField();
        SearchDoctorByFieldButton = new MyButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        SearchDoctorbyFieldTable = new javax.swing.JTable();
        jPanel26 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        DeletePatientRecordPanel = new javax.swing.JPanel();
        jPanel27 = new javax.swing.JPanel();
        jPanel28 = new javax.swing.JPanel();
        SearchRecordByDiseaseNaemLabel4 = new javax.swing.JLabel();
        ID_SearchField_forDeletion = new javax.swing.JTextField();
        DeleteRecordButton = new MyButton();
        ID_SearchButton = new MyButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        DeletionByIDTable = new javax.swing.JTable();
        jPanel29 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        UpdatePatientRecordPanel = new javax.swing.JPanel();
        jPanel30 = new javax.swing.JPanel();
        jPanel33 = new javax.swing.JPanel();
        SearchRecordByDiseaseNaemLabel5 = new javax.swing.JLabel();
        ID_SearchField_forUpdation = new javax.swing.JTextField();
        UpdateRecordButton = new MyButton();
        ID_SearchButton_forUpdation = new MyButton();
        jScrollPane10 = new javax.swing.JScrollPane();
        UpdationByIDTable = new javax.swing.JTable();
        jPanel34 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jMenuBar2 = new javax.swing.JMenuBar();
        ManageRecord = new javax.swing.JMenu();
        AddNewPatient = new javax.swing.JMenuItem();
        AddNewDoctor = new javax.swing.JMenuItem();
        AddNewDisease = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        DeletePatientRecord = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        UpdateRecord = new javax.swing.JMenu();
        UpdatePatientRecord = new javax.swing.JMenuItem();
        UpdateDoctorRecord = new javax.swing.JMenuItem();
        SearchRecord = new javax.swing.JMenu();
        SearchPatientbyName = new javax.swing.JMenuItem();
        SearchPatientbyID = new javax.swing.JMenuItem();
        SearchPatientbyAge = new javax.swing.JMenuItem();
        SearchPatientbyDiseaseName = new javax.swing.JMenuItem();
        SearchPatientbyDoctorName = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        SearchDoctorbyName = new javax.swing.JMenuItem();
        SearchDoctorbyDiseaseSpecialization = new javax.swing.JMenuItem();
        Helpmenu = new javax.swing.JMenu();
        AboutUs = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        ChangePassword = new javax.swing.JMenuItem();

        RecordAddedVerifier.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        RecordAddedVerifier.setTitle("Record Verifier");
        RecordAddedVerifier.setAlwaysOnTop(true);
        RecordAddedVerifier.setBackground(new java.awt.Color(255, 255, 255));
        RecordAddedVerifier.setResizable(false);
        RecordAddedVerifier.setType(java.awt.Window.Type.POPUP);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/added.png"))); // NOI18N
        jPanel1.add(jLabel7, java.awt.BorderLayout.LINE_START);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel8.setText("Record has been Added Successfully");
        jPanel2.add(jLabel8, new java.awt.GridBagConstraints());

        AddRecordButton.setText("OK");
        AddRecordButton.setPreferredSize(new java.awt.Dimension(55, 30));
        AddRecordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddRecordButtonActionPerformed(evt);
            }
        });
        AddRecordButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                AddRecordButtonKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(33, 0, 0, 9);
        jPanel2.add(AddRecordButton, gridBagConstraints);

        jPanel1.add(jPanel2, java.awt.BorderLayout.CENTER);

        RecordAddedVerifier.getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        NotFoundPopUp.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        NotFoundPopUp.setResizable(false);

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setLayout(new java.awt.BorderLayout(0, 5));

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/not-found.png"))); // NOI18N
        jPanel7.add(jLabel13, java.awt.BorderLayout.LINE_START);

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setLayout(new java.awt.GridBagLayout());

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel14.setText("Record Not Found");
        jPanel8.add(jLabel14, new java.awt.GridBagConstraints());

        notFoundButton.setText("OK");
        notFoundButton.setPreferredSize(new java.awt.Dimension(55, 30));
        notFoundButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notFoundButtonActionPerformed(evt);
            }
        });
        notFoundButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                notFoundButtonKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(33, 0, 0, 9);
        jPanel8.add(notFoundButton, gridBagConstraints);

        jPanel7.add(jPanel8, java.awt.BorderLayout.CENTER);

        NotFoundPopUp.getContentPane().add(jPanel7, java.awt.BorderLayout.CENTER);

        ConfirmDeletePopUp.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        ConfirmDeletePopUp.setBackground(new java.awt.Color(255, 255, 255));
        ConfirmDeletePopUp.setResizable(false);

        jPanel31.setBackground(new java.awt.Color(255, 255, 255));
        jPanel31.setLayout(new java.awt.BorderLayout());

        jLabel28.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/erase.png"))); // NOI18N
        jPanel31.add(jLabel28, java.awt.BorderLayout.LINE_START);

        jPanel32.setBackground(new java.awt.Color(255, 255, 255));
        jPanel32.setLayout(new java.awt.GridBagLayout());

        jLabel29.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel29.setText("Are you sure you want to");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        jPanel32.add(jLabel29, gridBagConstraints);

        CancelDelete.setText("Cancel");
        CancelDelete.setPreferredSize(new java.awt.Dimension(75, 30));
        CancelDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelDeleteActionPerformed(evt);
            }
        });
        CancelDelete.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CancelDeleteKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(33, 0, 0, 15);
        jPanel32.add(CancelDelete, gridBagConstraints);

        jLabel30.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel30.setText("permanently delete the record?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 0, 0);
        jPanel32.add(jLabel30, gridBagConstraints);

        ConfirmDelete.setText("OK");
        ConfirmDelete.setPreferredSize(new java.awt.Dimension(75, 30));
        ConfirmDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmDeleteActionPerformed(evt);
            }
        });
        ConfirmDelete.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ConfirmDeleteKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(33, 34, 0, 9);
        jPanel32.add(ConfirmDelete, gridBagConstraints);

        jPanel31.add(jPanel32, java.awt.BorderLayout.CENTER);

        ConfirmDeletePopUp.getContentPane().add(jPanel31, java.awt.BorderLayout.CENTER);

        UpdateRecordDialogPopUp.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        UpdateRecordDialogPopUp.setTitle("Update Patient Information");
        UpdateRecordDialogPopUp.setBackground(new java.awt.Color(255, 255, 255));
        UpdateRecordDialogPopUp.setResizable(false);

        jPanel14.setBackground(new java.awt.Color(255, 255, 255));
        jPanel14.setLayout(new java.awt.GridBagLayout());

        PatientNameLabel1.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        PatientNameLabel1.setText("Patient Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(16, 0, 0, 0);
        jPanel14.add(PatientNameLabel1, gridBagConstraints);

        UpdatePatientNameField.setEditable(false);
        UpdatePatientNameField.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        UpdatePatientNameField.setEnabled(false);
        UpdatePatientNameField.setPreferredSize(new java.awt.Dimension(200, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(16, 0, 0, 52);
        jPanel14.add(UpdatePatientNameField, gridBagConstraints);

        FatherNameLabel1.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        FatherNameLabel1.setText("Father Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 0, 0);
        jPanel14.add(FatherNameLabel1, gridBagConstraints);

        DOB.setEditable(false);
        DOB.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        DOB.setEnabled(false);
        DOB.setPreferredSize(new java.awt.Dimension(200, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 0, 52);
        jPanel14.add(DOB, gridBagConstraints);

        DateofBirthLabel1.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        DateofBirthLabel1.setText("Date of Birth :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(11, 0, 0, 0);
        jPanel14.add(DateofBirthLabel1, gridBagConstraints);

        Gender1.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        Gender1.setText("Sex :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel14.add(Gender1, gridBagConstraints);

        DoctorNameLabel1.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        DoctorNameLabel1.setText("Doctor ID :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel14.add(DoctorNameLabel1, gridBagConstraints);

        DiseaseHistroyLabel1.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        DiseaseHistroyLabel1.setText("Disease History :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 1);
        jPanel14.add(DiseaseHistroyLabel1, gridBagConstraints);

        UpdateDiseaseHistroyField.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N

        Disease_Histroy1.setColumns(20);
        Disease_Histroy1.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        Disease_Histroy1.setRows(5);
        UpdateDiseaseHistroyField.setViewportView(Disease_Histroy1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(15, 33, 0, 11);
        jPanel14.add(UpdateDiseaseHistroyField, gridBagConstraints);

        PrescriptionLabel1.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        PrescriptionLabel1.setText("Prescription :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel14.add(PrescriptionLabel1, gridBagConstraints);

        UpdatePrescriptionField.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N

        Prescription1.setColumns(20);
        Prescription1.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        Prescription1.setRows(5);
        UpdatePrescriptionField.setViewportView(Prescription1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(15, 33, 0, 11);
        jPanel14.add(UpdatePrescriptionField, gridBagConstraints);

        CancelPatientUpdate.setText("Cancel");
        CancelPatientUpdate.setBorderColor(new java.awt.Color(153, 153, 153));
        CancelPatientUpdate.setColor(new java.awt.Color(204, 204, 255));
        CancelPatientUpdate.setColorClick(new java.awt.Color(129, 117, 249));
        CancelPatientUpdate.setColorOver(new java.awt.Color(153, 153, 255));
        CancelPatientUpdate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        CancelPatientUpdate.setPreferredSize(new java.awt.Dimension(80, 30));
        CancelPatientUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelPatientUpdateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(15, 143, 0, 0);
        jPanel14.add(CancelPatientUpdate, gridBagConstraints);

        UpdatePatientRecordButton.setBackground(new java.awt.Color(204, 204, 255));
        UpdatePatientRecordButton.setText("Update");
        UpdatePatientRecordButton.setBorderColor(new java.awt.Color(153, 153, 153));
        UpdatePatientRecordButton.setColor(new java.awt.Color(204, 204, 255));
        UpdatePatientRecordButton.setColorClick(new java.awt.Color(129, 117, 249));
        UpdatePatientRecordButton.setColorOver(new java.awt.Color(153, 153, 255));
        UpdatePatientRecordButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        UpdatePatientRecordButton.setPreferredSize(new java.awt.Dimension(80, 30));
        UpdatePatientRecordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdatePatientRecordButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 100);
        jPanel14.add(UpdatePatientRecordButton, gridBagConstraints);

        UpdateFatherNameField1.setEditable(false);
        UpdateFatherNameField1.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        UpdateFatherNameField1.setEnabled(false);
        UpdateFatherNameField1.setPreferredSize(new java.awt.Dimension(200, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 0, 52);
        jPanel14.add(UpdateFatherNameField1, gridBagConstraints);

        UpdateFatherNameField.setEditable(false);
        UpdateFatherNameField.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        UpdateFatherNameField.setEnabled(false);
        UpdateFatherNameField.setPreferredSize(new java.awt.Dimension(200, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 0, 52);
        jPanel14.add(UpdateFatherNameField, gridBagConstraints);

        gender.setEditable(false);
        gender.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        gender.setEnabled(false);
        gender.setPreferredSize(new java.awt.Dimension(200, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 0, 52);
        jPanel14.add(gender, gridBagConstraints);

        UpdateRecordDialogPopUp.getContentPane().add(jPanel14, java.awt.BorderLayout.CENTER);

        ConfirmUpdatePopUp.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        ConfirmUpdatePopUp.setBackground(new java.awt.Color(255, 255, 255));
        ConfirmUpdatePopUp.setResizable(false);

        jPanel35.setBackground(new java.awt.Color(255, 255, 255));
        jPanel35.setLayout(new java.awt.BorderLayout());

        jLabel33.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/updated.png"))); // NOI18N
        jPanel35.add(jLabel33, java.awt.BorderLayout.LINE_START);

        jPanel36.setBackground(new java.awt.Color(255, 255, 255));
        jPanel36.setLayout(new java.awt.GridBagLayout());

        jLabel34.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel34.setText("Are you sure you want to");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        jPanel36.add(jLabel34, gridBagConstraints);

        CancelUpdate.setText("Cancel");
        CancelUpdate.setPreferredSize(new java.awt.Dimension(75, 30));
        CancelUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelUpdateActionPerformed(evt);
            }
        });
        CancelUpdate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CancelUpdateKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(33, 0, 0, 15);
        jPanel36.add(CancelUpdate, gridBagConstraints);

        jLabel35.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel35.setText("Update the record?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 0, 0);
        jPanel36.add(jLabel35, gridBagConstraints);

        ConfirmUpdate.setText("OK");
        ConfirmUpdate.setPreferredSize(new java.awt.Dimension(75, 30));
        ConfirmUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmUpdateActionPerformed(evt);
            }
        });
        ConfirmUpdate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ConfirmUpdateKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(33, 34, 0, 9);
        jPanel36.add(ConfirmUpdate, gridBagConstraints);

        jPanel35.add(jPanel36, java.awt.BorderLayout.CENTER);

        ConfirmUpdatePopUp.getContentPane().add(jPanel35, java.awt.BorderLayout.CENTER);

        UpdateDoctorDialogPopUp.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        UpdateDoctorDialogPopUp.setTitle("Update Patient Information");
        UpdateDoctorDialogPopUp.setBackground(new java.awt.Color(255, 255, 255));
        UpdateDoctorDialogPopUp.setResizable(false);

        ADCDoctorNameField1.setBackground(new java.awt.Color(255, 255, 255));
        ADCDoctorNameField1.setLayout(new java.awt.GridBagLayout());

        addDoc_DoctorNameField1.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        addDoc_DoctorNameField1.setPreferredSize(new java.awt.Dimension(200, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(37, 20, 0, 0);
        ADCDoctorNameField1.add(addDoc_DoctorNameField1, gridBagConstraints);

        FieldofSpecializationLabel1.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        FieldofSpecializationLabel1.setText("Field of Specialization :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        ADCDoctorNameField1.add(FieldofSpecializationLabel1, gridBagConstraints);

        SaveDoctor1.setBackground(new java.awt.Color(204, 204, 255));
        SaveDoctor1.setText("Save");
        SaveDoctor1.setBorderColor(new java.awt.Color(153, 153, 153));
        SaveDoctor1.setColor(new java.awt.Color(204, 204, 255));
        SaveDoctor1.setColorClick(new java.awt.Color(129, 117, 249));
        SaveDoctor1.setColorOver(new java.awt.Color(153, 153, 255));
        SaveDoctor1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        SaveDoctor1.setPreferredSize(new java.awt.Dimension(80, 30));
        SaveDoctor1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveDoctor1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(25, 0, 0, 86);
        ADCDoctorNameField1.add(SaveDoctor1, gridBagConstraints);

        CancelDoctor1.setText("Cancel");
        CancelDoctor1.setBorderColor(new java.awt.Color(153, 153, 153));
        CancelDoctor1.setColor(new java.awt.Color(204, 204, 255));
        CancelDoctor1.setColorClick(new java.awt.Color(129, 117, 249));
        CancelDoctor1.setColorOver(new java.awt.Color(153, 153, 255));
        CancelDoctor1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        CancelDoctor1.setPreferredSize(new java.awt.Dimension(80, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(25, 129, 0, 0);
        ADCDoctorNameField1.add(CancelDoctor1, gridBagConstraints);

        ADCDoctorNameLabel3.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        ADCDoctorNameLabel3.setText("Doctor Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(37, 73, 0, 0);
        ADCDoctorNameField1.add(ADCDoctorNameLabel3, gridBagConstraints);

        FieldofSpecializationField1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        FieldofSpecializationField1.setToolTipText("");
        FieldofSpecializationField1.setName(""); // NOI18N
        FieldofSpecializationField1.setPreferredSize(new java.awt.Dimension(200, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(16, 21, 0, 0);
        ADCDoctorNameField1.add(FieldofSpecializationField1, gridBagConstraints);

        UpdateDoctorDialogPopUp.getContentPane().add(ADCDoctorNameField1, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1000, 700));

        Welcome.setLayout(new java.awt.BorderLayout());

        ToolBar.setBackground(new java.awt.Color(255, 255, 255));
        ToolBar.setLayout(new java.awt.BorderLayout());

        ToolBarButtons.setBackground(new java.awt.Color(238, 236, 236));
        ToolBarButtons.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ToolBarButtons.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        AddNewPatientButton.setBackground(new java.awt.Color(238, 236, 236));
        AddNewPatientButton.setBorder(null);
        AddNewPatientButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/addpatient.png"))); // NOI18N
        AddNewPatientButton.setBorderColor(new java.awt.Color(240, 240, 240));
        AddNewPatientButton.setColor(new java.awt.Color(238, 236, 236));
        AddNewPatientButton.setColorClick(new java.awt.Color(204, 204, 255));
        AddNewPatientButton.setColorOver(new java.awt.Color(153, 153, 255));
        AddNewPatientButton.setFocusable(false);
        AddNewPatientButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        AddNewPatientButton.setPreferredSize(new java.awt.Dimension(40, 40));
        AddNewPatientButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        AddNewPatientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddNewPatientButtonActionPerformed(evt);
            }
        });
        ToolBarButtons.add(AddNewPatientButton);
        ToolBarButtons.add(jSeparator5);

        SearchPatientRecordButton.setBackground(new java.awt.Color(238, 236, 236));
        SearchPatientRecordButton.setBorder(null);
        SearchPatientRecordButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/searchnewrecord.png"))); // NOI18N
        SearchPatientRecordButton.setBorderColor(new java.awt.Color(240, 240, 240));
        SearchPatientRecordButton.setColor(new java.awt.Color(238, 236, 236));
        SearchPatientRecordButton.setColorClick(new java.awt.Color(204, 204, 255));
        SearchPatientRecordButton.setColorOver(new java.awt.Color(153, 153, 255));
        SearchPatientRecordButton.setFocusable(false);
        SearchPatientRecordButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        SearchPatientRecordButton.setPreferredSize(new java.awt.Dimension(40, 40));
        SearchPatientRecordButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        SearchPatientRecordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchPatientRecordButtonActionPerformed(evt);
            }
        });
        ToolBarButtons.add(SearchPatientRecordButton);
        ToolBarButtons.add(jSeparator6);

        AddNewDoctorButton.setBackground(new java.awt.Color(238, 236, 236));
        AddNewDoctorButton.setBorder(null);
        AddNewDoctorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/adddoctor.png"))); // NOI18N
        AddNewDoctorButton.setBorderColor(new java.awt.Color(240, 240, 240));
        AddNewDoctorButton.setColor(new java.awt.Color(238, 236, 236));
        AddNewDoctorButton.setColorClick(new java.awt.Color(204, 204, 255));
        AddNewDoctorButton.setColorOver(new java.awt.Color(153, 153, 255));
        AddNewDoctorButton.setFocusable(false);
        AddNewDoctorButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        AddNewDoctorButton.setPreferredSize(new java.awt.Dimension(40, 40));
        AddNewDoctorButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        AddNewDoctorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddNewDoctorButtonActionPerformed(evt);
            }
        });
        ToolBarButtons.add(AddNewDoctorButton);
        ToolBarButtons.add(jSeparator7);

        PrintButton.setBackground(new java.awt.Color(238, 236, 236));
        PrintButton.setBorder(null);
        PrintButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/print.png"))); // NOI18N
        PrintButton.setBorderColor(new java.awt.Color(240, 240, 240));
        PrintButton.setColor(new java.awt.Color(238, 236, 236));
        PrintButton.setColorClick(new java.awt.Color(204, 204, 255));
        PrintButton.setColorOver(new java.awt.Color(153, 153, 255));
        PrintButton.setFocusable(false);
        PrintButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        PrintButton.setPreferredSize(new java.awt.Dimension(40, 40));
        PrintButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        PrintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrintButtonActionPerformed(evt);
            }
        });
        ToolBarButtons.add(PrintButton);

        jPanel37.setBackground(new java.awt.Color(238, 236, 236));
        jPanel37.setLayout(new java.awt.GridBagLayout());

        Update_Patient.setBackground(new java.awt.Color(238, 236, 236));
        Update_Patient.setBorder(null);
        Update_Patient.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/updatePatient.png"))); // NOI18N
        Update_Patient.setBorderColor(new java.awt.Color(240, 240, 240));
        Update_Patient.setColor(new java.awt.Color(238, 236, 236));
        Update_Patient.setColorClick(new java.awt.Color(204, 204, 255));
        Update_Patient.setColorOver(new java.awt.Color(153, 153, 255));
        Update_Patient.setFocusable(false);
        Update_Patient.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Update_Patient.setPreferredSize(new java.awt.Dimension(40, 40));
        Update_Patient.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Update_Patient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Update_PatientActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 32, 0, 0);
        jPanel37.add(Update_Patient, gridBagConstraints);

        Delete_PatientRecordButton.setBackground(new java.awt.Color(238, 236, 236));
        Delete_PatientRecordButton.setBorder(null);
        Delete_PatientRecordButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/removePatient.png"))); // NOI18N
        Delete_PatientRecordButton.setBorderColor(new java.awt.Color(240, 240, 240));
        Delete_PatientRecordButton.setColor(new java.awt.Color(238, 236, 236));
        Delete_PatientRecordButton.setColorClick(new java.awt.Color(204, 204, 255));
        Delete_PatientRecordButton.setColorOver(new java.awt.Color(153, 153, 255));
        Delete_PatientRecordButton.setFocusable(false);
        Delete_PatientRecordButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Delete_PatientRecordButton.setPreferredSize(new java.awt.Dimension(40, 40));
        Delete_PatientRecordButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Delete_PatientRecordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_PatientRecordButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        jPanel37.add(Delete_PatientRecordButton, gridBagConstraints);

        ToolBarButtons.add(jPanel37);

        ToolBar.add(ToolBarButtons, java.awt.BorderLayout.CENTER);

        LogOutButton.setBackground(new java.awt.Color(238, 236, 236));
        LogOutButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        LogOutButton.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        LogOut.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        LogOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/Logout.png"))); // NOI18N
        LogOut.setBorderColor(new java.awt.Color(255, 102, 102));
        LogOut.setColor(new java.awt.Color(255, 153, 153));
        LogOut.setColorClick(new java.awt.Color(204, 204, 255));
        LogOut.setColorOver(new java.awt.Color(255, 102, 102));
        LogOut.setFocusable(false);
        LogOut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        LogOut.setPreferredSize(new java.awt.Dimension(40, 40));
        LogOut.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        LogOutButton.add(LogOut);

        ToolBar.add(LogOutButton, java.awt.BorderLayout.LINE_END);

        Welcome.add(ToolBar, java.awt.BorderLayout.PAGE_START);

        MainCards.setBackground(new java.awt.Color(255, 255, 255));
        MainCards.setLayout(new java.awt.CardLayout());

        GC.setBackground(new java.awt.Color(255, 255, 255));
        GC.setLayout(new java.awt.GridBagLayout());

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/StartScreen.png"))); // NOI18N
        GC.add(jLabel15, new java.awt.GridBagConstraints());

        MainCards.add(GC, "card1");

        APC.setBackground(new java.awt.Color(255, 255, 255));
        APC.setLayout(new java.awt.BorderLayout());

        Left.setBackground(new java.awt.Color(245, 101, 65));
        Left.setLayout(new java.awt.GridBagLayout());

        jLabel1.setBackground(new java.awt.Color(233, 102, 102));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/addPAT.jpg"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(19, 0, 0, 0);
        Left.add(jLabel1, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Trebuchet MS", 1, 36)); // NOI18N
        jLabel4.setText("Enter Patient's Detail");
        Left.add(jLabel4, new java.awt.GridBagConstraints());

        APC.add(Left, java.awt.BorderLayout.LINE_START);

        Right.setBackground(new java.awt.Color(255, 255, 255));
        Right.setLayout(new java.awt.GridBagLayout());

        PatientNameLabel.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        PatientNameLabel.setText("Patient Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(16, 0, 0, 0);
        Right.add(PatientNameLabel, gridBagConstraints);

        PatientNameField.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        PatientNameField.setPreferredSize(new java.awt.Dimension(200, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(16, 0, 0, 33);
        Right.add(PatientNameField, gridBagConstraints);

        FatherNameLabel.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        FatherNameLabel.setText("Father Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 0, 0);
        Right.add(FatherNameLabel, gridBagConstraints);

        FatherNameField.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        FatherNameField.setPreferredSize(new java.awt.Dimension(200, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(12, 0, 0, 33);
        Right.add(FatherNameField, gridBagConstraints);

        Gender.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        Gender.setText("Sex :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        Right.add(Gender, gridBagConstraints);

        DateofBirthLabel.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        DateofBirthLabel.setText("Date of Birth :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(11, 0, 0, 0);
        Right.add(DateofBirthLabel, gridBagConstraints);

        DateofBirthField.setBackground(new java.awt.Color(255, 255, 255));
        DateofBirthField.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        DateofBirthField.setPreferredSize(new java.awt.Dimension(200, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(11, 0, 0, 33);
        Right.add(DateofBirthField, gridBagConstraints);

        Sex.add(Female);
        Female.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Female.setText("Female");
        Female.setActionCommand("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(15, 42, 0, 0);
        Right.add(Female, gridBagConstraints);

        Sex.add(Male);
        Male.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Male.setText("Male");
        Male.setActionCommand("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 141);
        Right.add(Male, gridBagConstraints);

        DoctorNameLabel.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        DoctorNameLabel.setText("Doctor Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        Right.add(DoctorNameLabel, gridBagConstraints);

        DoctorNameField.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        DoctorNameField.setPreferredSize(new java.awt.Dimension(200, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 33);
        Right.add(DoctorNameField, gridBagConstraints);

        DiseaseHistroyLabel.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        DiseaseHistroyLabel.setText("Disease History :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 1);
        Right.add(DiseaseHistroyLabel, gridBagConstraints);

        PrescriptionField.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N

        Prescription.setColumns(20);
        Prescription.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        Prescription.setRows(5);
        PrescriptionField.setViewportView(Prescription);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(15, 35, 0, 0);
        Right.add(PrescriptionField, gridBagConstraints);

        PrescriptionLabel.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        PrescriptionLabel.setText("Prescription :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        Right.add(PrescriptionLabel, gridBagConstraints);

        DiseaseHistroyField.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N

        Disease_Histroy.setColumns(20);
        Disease_Histroy.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        Disease_Histroy.setRows(5);
        DiseaseHistroyField.setViewportView(Disease_Histroy);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(15, 35, 0, 0);
        Right.add(DiseaseHistroyField, gridBagConstraints);

        SavePatient.setBackground(new java.awt.Color(204, 204, 255));
        SavePatient.setText("Save");
        SavePatient.setBorderColor(new java.awt.Color(153, 153, 153));
        SavePatient.setColor(new java.awt.Color(204, 204, 255));
        SavePatient.setColorClick(new java.awt.Color(129, 117, 249));
        SavePatient.setColorOver(new java.awt.Color(153, 153, 255));
        SavePatient.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        SavePatient.setPreferredSize(new java.awt.Dimension(80, 30));
        SavePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SavePatientActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 105);
        Right.add(SavePatient, gridBagConstraints);

        CancelPatient.setText("Cancel");
        CancelPatient.setBorderColor(new java.awt.Color(153, 153, 153));
        CancelPatient.setColor(new java.awt.Color(204, 204, 255));
        CancelPatient.setColorClick(new java.awt.Color(129, 117, 249));
        CancelPatient.setColorOver(new java.awt.Color(153, 153, 255));
        CancelPatient.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        CancelPatient.setPreferredSize(new java.awt.Dimension(80, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(15, 182, 0, 0);
        Right.add(CancelPatient, gridBagConstraints);

        APC.add(Right, java.awt.BorderLayout.CENTER);

        MainCards.add(APC, "card2");

        ADocC.setLayout(new java.awt.BorderLayout());

        ADCleft.setBackground(new java.awt.Color(255, 255, 255));
        ADCleft.setLayout(new java.awt.GridBagLayout());

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ADC.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(17, 0, 0, 0);
        ADCleft.add(jLabel5, gridBagConstraints);

        ADCDoctorNameLabel.setFont(new java.awt.Font("Nirmala UI", 1, 32)); // NOI18N
        ADCDoctorNameLabel.setText("Enter Doctor's Detail");
        ADCleft.add(ADCDoctorNameLabel, new java.awt.GridBagConstraints());

        ADocC.add(ADCleft, java.awt.BorderLayout.LINE_START);

        ADCDoctorNameField.setBackground(new java.awt.Color(255, 255, 255));
        ADCDoctorNameField.setLayout(new java.awt.GridBagLayout());

        addDoc_DoctorNameField.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        addDoc_DoctorNameField.setPreferredSize(new java.awt.Dimension(200, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(37, 20, 0, 0);
        ADCDoctorNameField.add(addDoc_DoctorNameField, gridBagConstraints);

        FieldofSpecializationLabel.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        FieldofSpecializationLabel.setText("Field of Specialization :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        ADCDoctorNameField.add(FieldofSpecializationLabel, gridBagConstraints);

        SaveDoctor.setBackground(new java.awt.Color(204, 204, 255));
        SaveDoctor.setText("Save");
        SaveDoctor.setBorderColor(new java.awt.Color(153, 153, 153));
        SaveDoctor.setColor(new java.awt.Color(204, 204, 255));
        SaveDoctor.setColorClick(new java.awt.Color(129, 117, 249));
        SaveDoctor.setColorOver(new java.awt.Color(153, 153, 255));
        SaveDoctor.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        SaveDoctor.setPreferredSize(new java.awt.Dimension(80, 30));
        SaveDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveDoctorActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(25, 0, 0, 86);
        ADCDoctorNameField.add(SaveDoctor, gridBagConstraints);

        CancelDoctor.setText("Cancel");
        CancelDoctor.setBorderColor(new java.awt.Color(153, 153, 153));
        CancelDoctor.setColor(new java.awt.Color(204, 204, 255));
        CancelDoctor.setColorClick(new java.awt.Color(129, 117, 249));
        CancelDoctor.setColorOver(new java.awt.Color(153, 153, 255));
        CancelDoctor.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        CancelDoctor.setPreferredSize(new java.awt.Dimension(80, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(25, 129, 0, 0);
        ADCDoctorNameField.add(CancelDoctor, gridBagConstraints);

        ADCDoctorNameLabel2.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        ADCDoctorNameLabel2.setText("Doctor Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(37, 73, 0, 0);
        ADCDoctorNameField.add(ADCDoctorNameLabel2, gridBagConstraints);

        FieldofSpecializationField.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        FieldofSpecializationField.setToolTipText("");
        FieldofSpecializationField.setName(""); // NOI18N
        FieldofSpecializationField.setPreferredSize(new java.awt.Dimension(200, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(16, 21, 0, 0);
        ADCDoctorNameField.add(FieldofSpecializationField, gridBagConstraints);

        ADocC.add(ADCDoctorNameField, java.awt.BorderLayout.CENTER);

        MainCards.add(ADocC, "card3");

        ADisC.setLayout(new java.awt.BorderLayout());

        ADisLeft.setBackground(new java.awt.Color(255, 255, 255));
        ADisLeft.setLayout(new java.awt.GridLayout(1, 0));

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/disease.jpg"))); // NOI18N
        ADisLeft.add(jLabel6);

        ADisC.add(ADisLeft, java.awt.BorderLayout.LINE_START);

        ADisRight.setBackground(new java.awt.Color(255, 255, 255));
        ADisRight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ADisRightKeyPressed(evt);
            }
        });
        ADisRight.setLayout(new java.awt.GridBagLayout());

        ADisC_DiseaseNameLabel.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        ADisC_DiseaseNameLabel.setText("Disease Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(16, 107, 0, 0);
        ADisRight.add(ADisC_DiseaseNameLabel, gridBagConstraints);

        ADisC_DiseaseNameField.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        ADisC_DiseaseNameField.setPreferredSize(new java.awt.Dimension(200, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(16, 0, 0, 17);
        ADisRight.add(ADisC_DiseaseNameField, gridBagConstraints);

        ADisC_DiseaseDescriptionLabel.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        ADisC_DiseaseDescriptionLabel.setText("Disease Description :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(15, 61, 0, 0);
        ADisRight.add(ADisC_DiseaseDescriptionLabel, gridBagConstraints);

        DiseaseHistroyField1.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N

        ADisC_DiseaseDescriptionField.setColumns(20);
        ADisC_DiseaseDescriptionField.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        ADisC_DiseaseDescriptionField.setRows(5);
        DiseaseHistroyField1.setViewportView(ADisC_DiseaseDescriptionField);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(16, 50, 0, 0);
        ADisRight.add(DiseaseHistroyField1, gridBagConstraints);

        SaveDisease.setBackground(new java.awt.Color(204, 204, 255));
        SaveDisease.setText("Save");
        SaveDisease.setBorderColor(new java.awt.Color(153, 153, 153));
        SaveDisease.setColor(new java.awt.Color(204, 204, 255));
        SaveDisease.setColorClick(new java.awt.Color(129, 117, 249));
        SaveDisease.setColorOver(new java.awt.Color(153, 153, 255));
        SaveDisease.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        SaveDisease.setPreferredSize(new java.awt.Dimension(80, 30));
        SaveDisease.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveDiseaseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(25, 0, 0, 86);
        ADisRight.add(SaveDisease, gridBagConstraints);

        CancelDisease.setText("Cancel");
        CancelDisease.setBorderColor(new java.awt.Color(153, 153, 153));
        CancelDisease.setColor(new java.awt.Color(204, 204, 255));
        CancelDisease.setColorClick(new java.awt.Color(129, 117, 249));
        CancelDisease.setColorOver(new java.awt.Color(153, 153, 255));
        CancelDisease.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        CancelDisease.setPreferredSize(new java.awt.Dimension(80, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(25, 175, 0, 0);
        ADisRight.add(CancelDisease, gridBagConstraints);

        ADisC.add(ADisRight, java.awt.BorderLayout.CENTER);

        MainCards.add(ADisC, "card4");

        SearchRecordByNamePanel.setBackground(new java.awt.Color(255, 255, 255));
        SearchRecordByNamePanel.setLayout(new java.awt.BorderLayout());

        jPanel3.setBackground(new java.awt.Color(204, 204, 255));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        SearchByNameLabel.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        SearchByNameLabel.setText("Enter Patient Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(21, 0, 18, 0);
        jPanel4.add(SearchByNameLabel, gridBagConstraints);

        SearchByNameField.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        SearchByNameField.setPreferredSize(new java.awt.Dimension(200, 35));
        SearchByNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchByNameFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(21, 20, 18, 0);
        jPanel4.add(SearchByNameField, gridBagConstraints);

        SearchPatientByNameButton.setBackground(new java.awt.Color(204, 204, 255));
        SearchPatientByNameButton.setText("Search");
        SearchPatientByNameButton.setBorderColor(new java.awt.Color(153, 153, 153));
        SearchPatientByNameButton.setColor(new java.awt.Color(204, 204, 255));
        SearchPatientByNameButton.setColorClick(new java.awt.Color(129, 117, 249));
        SearchPatientByNameButton.setColorOver(new java.awt.Color(153, 153, 255));
        SearchPatientByNameButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        SearchPatientByNameButton.setPreferredSize(new java.awt.Dimension(80, 30));
        SearchPatientByNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchPatientByNameButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 29, 0, 0);
        jPanel4.add(SearchPatientByNameButton, gridBagConstraints);

        jPanel3.add(jPanel4, java.awt.BorderLayout.PAGE_START);

        SearchByNameTable.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        SearchByNameTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "PF_Name", "Gender", "DOB", "Doctor_ID", "Disease History", "Prescription"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        SearchByNameTable.setShowGrid(false);
        SearchByNameTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(SearchByNameTable);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        SearchRecordByNamePanel.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/Search.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel5.add(jLabel11, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Trebuchet MS", 1, 32)); // NOI18N
        jLabel9.setText("Search Record");
        jPanel5.add(jLabel9, new java.awt.GridBagConstraints());

        SearchRecordByNamePanel.add(jPanel5, java.awt.BorderLayout.LINE_START);

        MainCards.add(SearchRecordByNamePanel, "card5");

        SearchRecordByIDPanel.setBackground(new java.awt.Color(255, 255, 255));
        SearchRecordByIDPanel.setLayout(new java.awt.BorderLayout());

        jPanel6.setBackground(new java.awt.Color(204, 204, 255));
        jPanel6.setLayout(new java.awt.BorderLayout());

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));
        jPanel9.setLayout(new java.awt.GridBagLayout());

        SearchRecordByIDLabel.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        SearchRecordByIDLabel.setText("Enter Patient ID:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(21, 0, 18, 0);
        jPanel9.add(SearchRecordByIDLabel, gridBagConstraints);

        SearchByIDField.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        SearchByIDField.setPreferredSize(new java.awt.Dimension(200, 35));
        SearchByIDField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchByIDFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(21, 20, 18, 0);
        jPanel9.add(SearchByIDField, gridBagConstraints);

        SearchRecordByIDButton.setBackground(new java.awt.Color(204, 204, 255));
        SearchRecordByIDButton.setText("Search");
        SearchRecordByIDButton.setBorderColor(new java.awt.Color(153, 153, 153));
        SearchRecordByIDButton.setColor(new java.awt.Color(204, 204, 255));
        SearchRecordByIDButton.setColorClick(new java.awt.Color(129, 117, 249));
        SearchRecordByIDButton.setColorOver(new java.awt.Color(153, 153, 255));
        SearchRecordByIDButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        SearchRecordByIDButton.setPreferredSize(new java.awt.Dimension(80, 30));
        SearchRecordByIDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchRecordByIDButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 29, 0, 0);
        jPanel9.add(SearchRecordByIDButton, gridBagConstraints);

        jPanel6.add(jPanel9, java.awt.BorderLayout.PAGE_START);

        SearchRecordByIDTable.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        SearchRecordByIDTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "PF_Name", "Gender", "DOB", "Doctor_ID", "Disease History", "Prescription"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        SearchRecordByIDTable.setShowGrid(false);
        SearchRecordByIDTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(SearchRecordByIDTable);

        jPanel6.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        SearchRecordByIDPanel.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setLayout(new java.awt.GridBagLayout());

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/Search.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel10.add(jLabel12, gridBagConstraints);

        jLabel10.setFont(new java.awt.Font("Trebuchet MS", 1, 32)); // NOI18N
        jLabel10.setText("Search Record");
        jPanel10.add(jLabel10, new java.awt.GridBagConstraints());

        SearchRecordByIDPanel.add(jPanel10, java.awt.BorderLayout.LINE_START);

        MainCards.add(SearchRecordByIDPanel, "card6");

        SearchRecordByAgePanel.setBackground(new java.awt.Color(255, 255, 255));
        SearchRecordByAgePanel.setLayout(new java.awt.BorderLayout());

        jPanel11.setBackground(new java.awt.Color(204, 204, 255));
        jPanel11.setLayout(new java.awt.BorderLayout());

        jPanel12.setBackground(new java.awt.Color(255, 255, 255));
        jPanel12.setLayout(new java.awt.GridBagLayout());

        SearchRecordByAgeLabel.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        SearchRecordByAgeLabel.setText("Enter Patient Age:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(21, 0, 18, 0);
        jPanel12.add(SearchRecordByAgeLabel, gridBagConstraints);

        SearchByAgeField.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        SearchByAgeField.setPreferredSize(new java.awt.Dimension(200, 35));
        SearchByAgeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchByAgeFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(21, 20, 18, 0);
        jPanel12.add(SearchByAgeField, gridBagConstraints);

        SearchRecordByAgeButton.setBackground(new java.awt.Color(204, 204, 255));
        SearchRecordByAgeButton.setText("Search");
        SearchRecordByAgeButton.setBorderColor(new java.awt.Color(153, 153, 153));
        SearchRecordByAgeButton.setColor(new java.awt.Color(204, 204, 255));
        SearchRecordByAgeButton.setColorClick(new java.awt.Color(129, 117, 249));
        SearchRecordByAgeButton.setColorOver(new java.awt.Color(153, 153, 255));
        SearchRecordByAgeButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        SearchRecordByAgeButton.setPreferredSize(new java.awt.Dimension(80, 30));
        SearchRecordByAgeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchRecordByAgeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 29, 0, 0);
        jPanel12.add(SearchRecordByAgeButton, gridBagConstraints);

        jPanel11.add(jPanel12, java.awt.BorderLayout.PAGE_START);

        SearchRecordByAgeTable.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        SearchRecordByAgeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "PF_Name", "Gender", "DOB", "Doctor_ID", "Disease History", "Prescription"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        SearchRecordByAgeTable.setShowGrid(false);
        SearchRecordByAgeTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(SearchRecordByAgeTable);

        jPanel11.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        SearchRecordByAgePanel.add(jPanel11, java.awt.BorderLayout.CENTER);

        jPanel13.setBackground(new java.awt.Color(255, 255, 255));
        jPanel13.setLayout(new java.awt.GridBagLayout());

        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/Search.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel13.add(jLabel16, gridBagConstraints);

        jLabel17.setFont(new java.awt.Font("Trebuchet MS", 1, 32)); // NOI18N
        jLabel17.setText("Search Record");
        jPanel13.add(jLabel17, new java.awt.GridBagConstraints());

        SearchRecordByAgePanel.add(jPanel13, java.awt.BorderLayout.LINE_START);

        MainCards.add(SearchRecordByAgePanel, "card7");

        SearchRecordByDiseaseNamePanel.setBackground(new java.awt.Color(255, 255, 255));
        SearchRecordByDiseaseNamePanel.setLayout(new java.awt.BorderLayout());

        jPanel15.setBackground(new java.awt.Color(204, 204, 255));
        jPanel15.setLayout(new java.awt.BorderLayout());

        jPanel16.setBackground(new java.awt.Color(255, 255, 255));
        jPanel16.setLayout(new java.awt.GridBagLayout());

        SearchRecordByDiseaseNaemLabel.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        SearchRecordByDiseaseNaemLabel.setText("Enter Disease Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(21, 0, 18, 0);
        jPanel16.add(SearchRecordByDiseaseNaemLabel, gridBagConstraints);

        SearchByDiseaseNameField.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        SearchByDiseaseNameField.setPreferredSize(new java.awt.Dimension(200, 35));
        SearchByDiseaseNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchByDiseaseNameFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(21, 20, 18, 0);
        jPanel16.add(SearchByDiseaseNameField, gridBagConstraints);

        SearchByDiseaseNameFieldButton.setBackground(new java.awt.Color(204, 204, 255));
        SearchByDiseaseNameFieldButton.setText("Search");
        SearchByDiseaseNameFieldButton.setBorderColor(new java.awt.Color(153, 153, 153));
        SearchByDiseaseNameFieldButton.setColor(new java.awt.Color(204, 204, 255));
        SearchByDiseaseNameFieldButton.setColorClick(new java.awt.Color(129, 117, 249));
        SearchByDiseaseNameFieldButton.setColorOver(new java.awt.Color(153, 153, 255));
        SearchByDiseaseNameFieldButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        SearchByDiseaseNameFieldButton.setPreferredSize(new java.awt.Dimension(80, 30));
        SearchByDiseaseNameFieldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchByDiseaseNameFieldButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 29, 0, 0);
        jPanel16.add(SearchByDiseaseNameFieldButton, gridBagConstraints);

        jPanel15.add(jPanel16, java.awt.BorderLayout.PAGE_START);

        SearchRecordByDiseaseNameTable.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        SearchRecordByDiseaseNameTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "PF_Name", "Gender", "DOB", "Doctor_Name", "Disease History", "Prescription"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        SearchRecordByDiseaseNameTable.setShowGrid(false);
        SearchRecordByDiseaseNameTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(SearchRecordByDiseaseNameTable);

        jPanel15.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        SearchRecordByDiseaseNamePanel.add(jPanel15, java.awt.BorderLayout.CENTER);

        jPanel17.setBackground(new java.awt.Color(255, 255, 255));
        jPanel17.setLayout(new java.awt.GridBagLayout());

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/Search.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel17.add(jLabel18, gridBagConstraints);

        jLabel19.setFont(new java.awt.Font("Trebuchet MS", 1, 32)); // NOI18N
        jLabel19.setText("Search Record");
        jPanel17.add(jLabel19, new java.awt.GridBagConstraints());

        SearchRecordByDiseaseNamePanel.add(jPanel17, java.awt.BorderLayout.LINE_START);

        MainCards.add(SearchRecordByDiseaseNamePanel, "card8");

        SearchRecordByDoctorNamePanel.setBackground(new java.awt.Color(255, 255, 255));
        SearchRecordByDoctorNamePanel.setLayout(new java.awt.BorderLayout());

        jPanel18.setBackground(new java.awt.Color(204, 204, 255));
        jPanel18.setLayout(new java.awt.BorderLayout());

        jPanel19.setBackground(new java.awt.Color(255, 255, 255));
        jPanel19.setLayout(new java.awt.GridBagLayout());

        SearchRecordByDiseaseNaemLabel1.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        SearchRecordByDiseaseNaemLabel1.setText("Enter Doctor Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(21, 0, 18, 0);
        jPanel19.add(SearchRecordByDiseaseNaemLabel1, gridBagConstraints);

        SearchByDoctorNameField.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        SearchByDoctorNameField.setPreferredSize(new java.awt.Dimension(200, 35));
        SearchByDoctorNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchByDoctorNameFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(21, 20, 18, 0);
        jPanel19.add(SearchByDoctorNameField, gridBagConstraints);

        SearchByDoctorNameFieldButton.setBackground(new java.awt.Color(204, 204, 255));
        SearchByDoctorNameFieldButton.setText("Search");
        SearchByDoctorNameFieldButton.setBorderColor(new java.awt.Color(153, 153, 153));
        SearchByDoctorNameFieldButton.setColor(new java.awt.Color(204, 204, 255));
        SearchByDoctorNameFieldButton.setColorClick(new java.awt.Color(129, 117, 249));
        SearchByDoctorNameFieldButton.setColorOver(new java.awt.Color(153, 153, 255));
        SearchByDoctorNameFieldButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        SearchByDoctorNameFieldButton.setPreferredSize(new java.awt.Dimension(80, 30));
        SearchByDoctorNameFieldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchByDoctorNameFieldButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 29, 0, 0);
        jPanel19.add(SearchByDoctorNameFieldButton, gridBagConstraints);

        jPanel18.add(jPanel19, java.awt.BorderLayout.PAGE_START);

        SearchRecordByDoctorNameTable.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        SearchRecordByDoctorNameTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "PF_Name", "Gender", "DOB", "Doctor_Name", "Disease History", "Prescription"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        SearchRecordByDoctorNameTable.setShowGrid(false);
        SearchRecordByDoctorNameTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(SearchRecordByDoctorNameTable);
        if (SearchRecordByDoctorNameTable.getColumnModel().getColumnCount() > 0) {
            SearchRecordByDoctorNameTable.getColumnModel().getColumn(3).setHeaderValue("Gender");
            SearchRecordByDoctorNameTable.getColumnModel().getColumn(4).setHeaderValue("DOB");
            SearchRecordByDoctorNameTable.getColumnModel().getColumn(5).setHeaderValue("Doctor_Name");
            SearchRecordByDoctorNameTable.getColumnModel().getColumn(6).setHeaderValue("Disease History");
            SearchRecordByDoctorNameTable.getColumnModel().getColumn(7).setHeaderValue("Prescription");
        }

        jPanel18.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        SearchRecordByDoctorNamePanel.add(jPanel18, java.awt.BorderLayout.CENTER);

        jPanel20.setBackground(new java.awt.Color(255, 255, 255));
        jPanel20.setLayout(new java.awt.GridBagLayout());

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/Search.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel20.add(jLabel20, gridBagConstraints);

        jLabel21.setFont(new java.awt.Font("Trebuchet MS", 1, 32)); // NOI18N
        jLabel21.setText("Search Record");
        jPanel20.add(jLabel21, new java.awt.GridBagConstraints());

        SearchRecordByDoctorNamePanel.add(jPanel20, java.awt.BorderLayout.LINE_START);

        MainCards.add(SearchRecordByDoctorNamePanel, "card9");

        SearchDoctorbyNamePanel.setBackground(new java.awt.Color(255, 255, 255));
        SearchDoctorbyNamePanel.setLayout(new java.awt.BorderLayout());

        jPanel21.setBackground(new java.awt.Color(204, 204, 255));
        jPanel21.setLayout(new java.awt.BorderLayout());

        jPanel22.setBackground(new java.awt.Color(255, 255, 255));
        jPanel22.setLayout(new java.awt.GridBagLayout());

        SearchRecordByDiseaseNaemLabel2.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        SearchRecordByDiseaseNaemLabel2.setText("Enter Doctor Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(21, 0, 18, 0);
        jPanel22.add(SearchRecordByDiseaseNaemLabel2, gridBagConstraints);

        SearchDoctorByNameField.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        SearchDoctorByNameField.setPreferredSize(new java.awt.Dimension(200, 35));
        SearchDoctorByNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchDoctorByNameFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(21, 20, 18, 0);
        jPanel22.add(SearchDoctorByNameField, gridBagConstraints);

        SearchDoctorByNameFieldButton.setBackground(new java.awt.Color(204, 204, 255));
        SearchDoctorByNameFieldButton.setText("Search");
        SearchDoctorByNameFieldButton.setBorderColor(new java.awt.Color(153, 153, 153));
        SearchDoctorByNameFieldButton.setColor(new java.awt.Color(204, 204, 255));
        SearchDoctorByNameFieldButton.setColorClick(new java.awt.Color(129, 117, 249));
        SearchDoctorByNameFieldButton.setColorOver(new java.awt.Color(153, 153, 255));
        SearchDoctorByNameFieldButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        SearchDoctorByNameFieldButton.setPreferredSize(new java.awt.Dimension(80, 30));
        SearchDoctorByNameFieldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchDoctorByNameFieldButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 29, 0, 0);
        jPanel22.add(SearchDoctorByNameFieldButton, gridBagConstraints);

        jPanel21.add(jPanel22, java.awt.BorderLayout.PAGE_START);

        SearchDoctorByNameTable.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        SearchDoctorByNameTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Doctor_ID", "Disease_ID", "Doctor_Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        SearchDoctorByNameTable.setShowGrid(false);
        SearchDoctorByNameTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(SearchDoctorByNameTable);

        jPanel21.add(jScrollPane6, java.awt.BorderLayout.CENTER);

        SearchDoctorbyNamePanel.add(jPanel21, java.awt.BorderLayout.CENTER);

        jPanel23.setBackground(new java.awt.Color(255, 255, 255));
        jPanel23.setLayout(new java.awt.GridBagLayout());

        jLabel22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/Search.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel23.add(jLabel22, gridBagConstraints);

        jLabel23.setFont(new java.awt.Font("Trebuchet MS", 1, 32)); // NOI18N
        jLabel23.setText("Search Record");
        jPanel23.add(jLabel23, new java.awt.GridBagConstraints());

        SearchDoctorbyNamePanel.add(jPanel23, java.awt.BorderLayout.LINE_START);

        MainCards.add(SearchDoctorbyNamePanel, "card10");

        SearchDoctorbyFieldPanel.setBackground(new java.awt.Color(255, 255, 255));
        SearchDoctorbyFieldPanel.setLayout(new java.awt.BorderLayout());

        jPanel24.setBackground(new java.awt.Color(204, 204, 255));
        jPanel24.setLayout(new java.awt.BorderLayout());

        jPanel25.setBackground(new java.awt.Color(255, 255, 255));
        jPanel25.setLayout(new java.awt.GridBagLayout());

        SearchRecordByDiseaseNaemLabel3.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        SearchRecordByDiseaseNaemLabel3.setText("Enter Doctor Specialization:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(21, 0, 18, 0);
        jPanel25.add(SearchRecordByDiseaseNaemLabel3, gridBagConstraints);

        SearchDoctorByField.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        SearchDoctorByField.setPreferredSize(new java.awt.Dimension(200, 35));
        SearchDoctorByField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchDoctorByFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(21, 20, 18, 0);
        jPanel25.add(SearchDoctorByField, gridBagConstraints);

        SearchDoctorByFieldButton.setBackground(new java.awt.Color(204, 204, 255));
        SearchDoctorByFieldButton.setText("Search");
        SearchDoctorByFieldButton.setBorderColor(new java.awt.Color(153, 153, 153));
        SearchDoctorByFieldButton.setColor(new java.awt.Color(204, 204, 255));
        SearchDoctorByFieldButton.setColorClick(new java.awt.Color(129, 117, 249));
        SearchDoctorByFieldButton.setColorOver(new java.awt.Color(153, 153, 255));
        SearchDoctorByFieldButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        SearchDoctorByFieldButton.setPreferredSize(new java.awt.Dimension(80, 30));
        SearchDoctorByFieldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchDoctorByFieldButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 29, 0, 0);
        jPanel25.add(SearchDoctorByFieldButton, gridBagConstraints);

        jPanel24.add(jPanel25, java.awt.BorderLayout.PAGE_START);

        SearchDoctorbyFieldTable.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        SearchDoctorbyFieldTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Doctor_ID", "Disease_ID", "Doctor_Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        SearchDoctorbyFieldTable.setShowGrid(false);
        SearchDoctorbyFieldTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane7.setViewportView(SearchDoctorbyFieldTable);

        jPanel24.add(jScrollPane7, java.awt.BorderLayout.CENTER);

        SearchDoctorbyFieldPanel.add(jPanel24, java.awt.BorderLayout.CENTER);

        jPanel26.setBackground(new java.awt.Color(255, 255, 255));
        jPanel26.setLayout(new java.awt.GridBagLayout());

        jLabel24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/Search.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel26.add(jLabel24, gridBagConstraints);

        jLabel25.setFont(new java.awt.Font("Trebuchet MS", 1, 32)); // NOI18N
        jLabel25.setText("Search Record");
        jPanel26.add(jLabel25, new java.awt.GridBagConstraints());

        SearchDoctorbyFieldPanel.add(jPanel26, java.awt.BorderLayout.LINE_START);

        MainCards.add(SearchDoctorbyFieldPanel, "card11");

        DeletePatientRecordPanel.setBackground(new java.awt.Color(255, 255, 255));
        DeletePatientRecordPanel.setLayout(new java.awt.BorderLayout());

        jPanel27.setBackground(new java.awt.Color(204, 204, 255));
        jPanel27.setLayout(new java.awt.BorderLayout());

        jPanel28.setBackground(new java.awt.Color(255, 255, 255));
        jPanel28.setLayout(new java.awt.GridBagLayout());

        SearchRecordByDiseaseNaemLabel4.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        SearchRecordByDiseaseNaemLabel4.setText("Enter ID Number:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(21, 0, 18, 0);
        jPanel28.add(SearchRecordByDiseaseNaemLabel4, gridBagConstraints);

        ID_SearchField_forDeletion.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        ID_SearchField_forDeletion.setPreferredSize(new java.awt.Dimension(200, 35));
        ID_SearchField_forDeletion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ID_SearchField_forDeletionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(21, 20, 18, 0);
        jPanel28.add(ID_SearchField_forDeletion, gridBagConstraints);

        DeleteRecordButton.setBackground(new java.awt.Color(204, 204, 255));
        DeleteRecordButton.setText("Delete");
        DeleteRecordButton.setBorderColor(new java.awt.Color(153, 153, 153));
        DeleteRecordButton.setColor(new java.awt.Color(204, 204, 255));
        DeleteRecordButton.setColorClick(new java.awt.Color(129, 117, 249));
        DeleteRecordButton.setColorOver(new java.awt.Color(153, 153, 255));
        DeleteRecordButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        DeleteRecordButton.setPreferredSize(new java.awt.Dimension(80, 30));
        DeleteRecordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteRecordButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 29, 0, 0);
        jPanel28.add(DeleteRecordButton, gridBagConstraints);

        ID_SearchButton.setBackground(new java.awt.Color(204, 204, 255));
        ID_SearchButton.setText("Search");
        ID_SearchButton.setBorderColor(new java.awt.Color(153, 153, 153));
        ID_SearchButton.setColor(new java.awt.Color(204, 204, 255));
        ID_SearchButton.setColorClick(new java.awt.Color(129, 117, 249));
        ID_SearchButton.setColorOver(new java.awt.Color(153, 153, 255));
        ID_SearchButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        ID_SearchButton.setPreferredSize(new java.awt.Dimension(80, 30));
        ID_SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ID_SearchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 29, 0, 0);
        jPanel28.add(ID_SearchButton, gridBagConstraints);

        jPanel27.add(jPanel28, java.awt.BorderLayout.PAGE_START);

        DeletionByIDTable.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        DeletionByIDTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "PF_Name", "Gender", "DOB", "Doctor_ID", "Disease History", "Prescription"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        DeletionByIDTable.setShowGrid(false);
        DeletionByIDTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane9.setViewportView(DeletionByIDTable);

        jPanel27.add(jScrollPane9, java.awt.BorderLayout.CENTER);

        DeletePatientRecordPanel.add(jPanel27, java.awt.BorderLayout.CENTER);

        jPanel29.setBackground(new java.awt.Color(255, 255, 255));
        jPanel29.setLayout(new java.awt.GridBagLayout());

        jLabel26.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/delete.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(21, 27, 0, 26);
        jPanel29.add(jLabel26, gridBagConstraints);

        jLabel27.setFont(new java.awt.Font("Trebuchet MS", 1, 32)); // NOI18N
        jLabel27.setText("Delete Record");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 27, 0, 26);
        jPanel29.add(jLabel27, gridBagConstraints);

        DeletePatientRecordPanel.add(jPanel29, java.awt.BorderLayout.LINE_START);

        MainCards.add(DeletePatientRecordPanel, "card12");

        UpdatePatientRecordPanel.setBackground(new java.awt.Color(255, 255, 255));
        UpdatePatientRecordPanel.setLayout(new java.awt.BorderLayout());

        jPanel30.setBackground(new java.awt.Color(204, 204, 255));
        jPanel30.setLayout(new java.awt.BorderLayout());

        jPanel33.setBackground(new java.awt.Color(255, 255, 255));
        jPanel33.setLayout(new java.awt.GridBagLayout());

        SearchRecordByDiseaseNaemLabel5.setFont(new java.awt.Font("Nirmala UI", 1, 18)); // NOI18N
        SearchRecordByDiseaseNaemLabel5.setText("Enter ID Number:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(21, 0, 18, 0);
        jPanel33.add(SearchRecordByDiseaseNaemLabel5, gridBagConstraints);

        ID_SearchField_forUpdation.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        ID_SearchField_forUpdation.setPreferredSize(new java.awt.Dimension(200, 35));
        ID_SearchField_forUpdation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ID_SearchField_forUpdationActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(21, 20, 18, 0);
        jPanel33.add(ID_SearchField_forUpdation, gridBagConstraints);

        UpdateRecordButton.setBackground(new java.awt.Color(204, 204, 255));
        UpdateRecordButton.setText("Update");
        UpdateRecordButton.setBorderColor(new java.awt.Color(153, 153, 153));
        UpdateRecordButton.setColor(new java.awt.Color(204, 204, 255));
        UpdateRecordButton.setColorClick(new java.awt.Color(129, 117, 249));
        UpdateRecordButton.setColorOver(new java.awt.Color(153, 153, 255));
        UpdateRecordButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        UpdateRecordButton.setPreferredSize(new java.awt.Dimension(80, 30));
        UpdateRecordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateRecordButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 29, 0, 0);
        jPanel33.add(UpdateRecordButton, gridBagConstraints);

        ID_SearchButton_forUpdation.setBackground(new java.awt.Color(204, 204, 255));
        ID_SearchButton_forUpdation.setText("Search");
        ID_SearchButton_forUpdation.setBorderColor(new java.awt.Color(153, 153, 153));
        ID_SearchButton_forUpdation.setColor(new java.awt.Color(204, 204, 255));
        ID_SearchButton_forUpdation.setColorClick(new java.awt.Color(129, 117, 249));
        ID_SearchButton_forUpdation.setColorOver(new java.awt.Color(153, 153, 255));
        ID_SearchButton_forUpdation.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        ID_SearchButton_forUpdation.setPreferredSize(new java.awt.Dimension(80, 30));
        ID_SearchButton_forUpdation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ID_SearchButton_forUpdationActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(4, 29, 0, 0);
        jPanel33.add(ID_SearchButton_forUpdation, gridBagConstraints);

        jPanel30.add(jPanel33, java.awt.BorderLayout.PAGE_START);

        UpdationByIDTable.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        UpdationByIDTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "PF_Name", "Gender", "DOB", "Doctor_ID", "Disease History", "Prescription"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        UpdationByIDTable.setShowGrid(false);
        UpdationByIDTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane10.setViewportView(UpdationByIDTable);

        jPanel30.add(jScrollPane10, java.awt.BorderLayout.CENTER);

        UpdatePatientRecordPanel.add(jPanel30, java.awt.BorderLayout.CENTER);

        jPanel34.setBackground(new java.awt.Color(255, 255, 255));
        jPanel34.setLayout(new java.awt.GridBagLayout());

        jLabel31.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/update.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(21, 27, 0, 26);
        jPanel34.add(jLabel31, gridBagConstraints);

        jLabel32.setFont(new java.awt.Font("Trebuchet MS", 1, 32)); // NOI18N
        jLabel32.setText("Update Record");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 27, 0, 26);
        jPanel34.add(jLabel32, gridBagConstraints);

        UpdatePatientRecordPanel.add(jPanel34, java.awt.BorderLayout.LINE_START);

        MainCards.add(UpdatePatientRecordPanel, "card13");

        Welcome.add(MainCards, java.awt.BorderLayout.CENTER);

        getContentPane().add(Welcome, java.awt.BorderLayout.CENTER);

        jMenuBar2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        ManageRecord.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ManageRecord.setText("Manage Record");

        AddNewPatient.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        AddNewPatient.setText("Add New Patient");
        AddNewPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddNewPatientActionPerformed(evt);
            }
        });
        ManageRecord.add(AddNewPatient);

        AddNewDoctor.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        AddNewDoctor.setText("Add New Doctor");
        AddNewDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddNewDoctorActionPerformed(evt);
            }
        });
        ManageRecord.add(AddNewDoctor);

        AddNewDisease.setText("Add New Disease");
        AddNewDisease.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddNewDiseaseActionPerformed(evt);
            }
        });
        ManageRecord.add(AddNewDisease);
        ManageRecord.add(jSeparator2);

        DeletePatientRecord.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_4, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        DeletePatientRecord.setText("Delete Patient Record");
        DeletePatientRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeletePatientRecordActionPerformed(evt);
            }
        });
        ManageRecord.add(DeletePatientRecord);
        ManageRecord.add(jSeparator3);

        UpdateRecord.setText("Update Record");

        UpdatePatientRecord.setText("Update Patient Record");
        UpdatePatientRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdatePatientRecordActionPerformed(evt);
            }
        });
        UpdateRecord.add(UpdatePatientRecord);

        UpdateDoctorRecord.setText("Update Doctor Record");
        UpdateRecord.add(UpdateDoctorRecord);

        ManageRecord.add(UpdateRecord);

        jMenuBar2.add(ManageRecord);

        SearchRecord.setText("Search Record");

        SearchPatientbyName.setText("Search Patient by Name");
        SearchPatientbyName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchPatientbyNameActionPerformed(evt);
            }
        });
        SearchRecord.add(SearchPatientbyName);

        SearchPatientbyID.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        SearchPatientbyID.setText("Search Patient by ID");
        SearchPatientbyID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchPatientbyIDActionPerformed(evt);
            }
        });
        SearchRecord.add(SearchPatientbyID);

        SearchPatientbyAge.setText("Search Patient by Age");
        SearchPatientbyAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchPatientbyAgeActionPerformed(evt);
            }
        });
        SearchRecord.add(SearchPatientbyAge);

        SearchPatientbyDiseaseName.setText("Search Patient by Disease Name");
        SearchPatientbyDiseaseName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchPatientbyDiseaseNameActionPerformed(evt);
            }
        });
        SearchRecord.add(SearchPatientbyDiseaseName);

        SearchPatientbyDoctorName.setText("Search Patient by Doctor Name");
        SearchPatientbyDoctorName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchPatientbyDoctorNameActionPerformed(evt);
            }
        });
        SearchRecord.add(SearchPatientbyDoctorName);
        SearchRecord.add(jSeparator4);

        SearchDoctorbyName.setText("Search Doctor by Name");
        SearchDoctorbyName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchDoctorbyNameActionPerformed(evt);
            }
        });
        SearchRecord.add(SearchDoctorbyName);

        SearchDoctorbyDiseaseSpecialization.setText("Search Doctor by Disease Specialization");
        SearchDoctorbyDiseaseSpecialization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchDoctorbyDiseaseSpecializationActionPerformed(evt);
            }
        });
        SearchRecord.add(SearchDoctorbyDiseaseSpecialization);

        jMenuBar2.add(SearchRecord);

        Helpmenu.setBackground(new java.awt.Color(204, 204, 204));
        Helpmenu.setText("Help menu");

        AboutUs.setText("About us");
        AboutUs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutUsActionPerformed(evt);
            }
        });
        Helpmenu.add(AboutUs);
        Helpmenu.add(jSeparator1);

        ChangePassword.setText("Change Password");
        ChangePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChangePasswordActionPerformed(evt);
            }
        });
        Helpmenu.add(ChangePassword);

        jMenuBar2.add(Helpmenu);

        setJMenuBar(jMenuBar2);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddNewPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddNewPatientActionPerformed
        cards.show(MainCards,"card2");
        PatientNameField.requestFocus();
    }//GEN-LAST:event_AddNewPatientActionPerformed

    private void AddNewDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddNewDoctorActionPerformed
        cards.show(MainCards,"card3");
        addDoc_DoctorNameField.requestFocus();
    }//GEN-LAST:event_AddNewDoctorActionPerformed

    private void AddNewDiseaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddNewDiseaseActionPerformed
        cards.show(MainCards,"card4");
        ADisC_DiseaseNameField.requestFocus();
    }//GEN-LAST:event_AddNewDiseaseActionPerformed

    private void DeletePatientRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeletePatientRecordActionPerformed
        cards.show(MainCards,"card12");
        ID_SearchField_forDeletion.requestFocus();
    }//GEN-LAST:event_DeletePatientRecordActionPerformed

    private void UpdatePatientRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdatePatientRecordActionPerformed
        cards.show(MainCards,"card13");
        ID_SearchField_forUpdation.requestFocus();
    }//GEN-LAST:event_UpdatePatientRecordActionPerformed

    private void ChangePasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChangePasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ChangePasswordActionPerformed

    private void AboutUsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutUsActionPerformed

    }//GEN-LAST:event_AboutUsActionPerformed

    private void SearchDoctorbyDiseaseSpecializationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchDoctorbyDiseaseSpecializationActionPerformed
        cards.show(MainCards,"card11");
        SearchDoctorByField.setText("");
        SearchDoctorByField.requestFocus();
    }//GEN-LAST:event_SearchDoctorbyDiseaseSpecializationActionPerformed

    private void SearchDoctorbyNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchDoctorbyNameActionPerformed
        cards.show(MainCards,"card10");
        SearchDoctorByNameField.setText("");
        SearchDoctorByNameField.requestFocus();
    }//GEN-LAST:event_SearchDoctorbyNameActionPerformed

    private void SearchPatientbyIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchPatientbyIDActionPerformed
        cards.show(MainCards,"card6");
        SearchByIDField.setText("");
        SearchByIDField.requestFocus();
    }//GEN-LAST:event_SearchPatientbyIDActionPerformed

    private void SearchPatientbyNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchPatientbyNameActionPerformed
        cards.show(MainCards,"card5");  
        SearchByNameField.requestFocus();
    }//GEN-LAST:event_SearchPatientbyNameActionPerformed

    private void AddNewPatientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddNewPatientButtonActionPerformed
        cards.show(MainCards,"card2");
        PatientNameField.requestFocus();        // TODO add your handling code here:
    }//GEN-LAST:event_AddNewPatientButtonActionPerformed

    private void AddNewDoctorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddNewDoctorButtonActionPerformed
        cards.show(MainCards,"card3");
        addDoc_DoctorNameField.setText("");
        addDoc_DoctorNameField.requestFocus();
    }//GEN-LAST:event_AddNewDoctorButtonActionPerformed

    private void SavePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SavePatientActionPerformed
        addPatientRecord();        // TODO add your handling code here:
    }//GEN-LAST:event_SavePatientActionPerformed

    private void SaveDiseaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveDiseaseActionPerformed
        addDiseaseRecord();
        updateComboBoxWhere("Disease", "Disease_Name", FieldofSpecializationField);
    }//GEN-LAST:event_SaveDiseaseActionPerformed

    private void SaveDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveDoctorActionPerformed
        addDoctorRecord();
        updateComboBoxWhere("Doctor", "Doctor_Name", DoctorNameField);
    }//GEN-LAST:event_SaveDoctorActionPerformed

    private void ADisRightKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ADisRightKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_ADisRightKeyPressed

    private void SearchByNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchByNameFieldActionPerformed
        String required = SearchByNameField.getText();
        searchPatientRecord("Patient_Name", required, SearchByNameTable);
        SearchByNameField.setText("");
        SearchByNameField.requestFocus();
    }//GEN-LAST:event_SearchByNameFieldActionPerformed

    private void SearchPatientByNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchPatientByNameButtonActionPerformed
        String required = SearchByNameField.getText();
        searchPatientRecord("Patient_Name", required, SearchByNameTable);   
        SearchByNameField.setText("");
        SearchByNameField.requestFocus();
    }//GEN-LAST:event_SearchPatientByNameButtonActionPerformed

    private void notFoundButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notFoundButtonActionPerformed
        NotFoundPopUp.dispose();
    }//GEN-LAST:event_notFoundButtonActionPerformed

    private void SearchByIDFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchByIDFieldActionPerformed
        String required = SearchByIDField.getText();
        searchPatientRecord("Patient_ID", required, SearchRecordByIDTable);
        SearchByIDField.setText("");
        SearchByIDField.requestFocus();
    }//GEN-LAST:event_SearchByIDFieldActionPerformed

    private void SearchRecordByIDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchRecordByIDButtonActionPerformed
        String required = SearchByIDField.getText();
        searchPatientRecord("Patient_ID", required, SearchRecordByIDTable);
        SearchByIDField.setText("");
        SearchByIDField.requestFocus();
    }//GEN-LAST:event_SearchRecordByIDButtonActionPerformed

    private void SearchByAgeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchByAgeFieldActionPerformed
        String required = SearchByAgeField.getText();
        searchPatientRecord("patient_age", required, SearchRecordByAgeTable);
        SearchByAgeField.setText("");
        SearchByAgeField.requestFocus();
    }//GEN-LAST:event_SearchByAgeFieldActionPerformed

    private void SearchRecordByAgeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchRecordByAgeButtonActionPerformed
        String required = SearchByAgeField.getText();
        searchPatientRecord("patient_age", required, SearchRecordByAgeTable);
        SearchByAgeField.setText("");
        SearchByAgeField.requestFocus();
    }//GEN-LAST:event_SearchRecordByAgeButtonActionPerformed

    private void SearchPatientbyAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchPatientbyAgeActionPerformed
        cards.show(MainCards,"card7");
        SearchByAgeField.setText("");
        SearchByAgeField.requestFocus();
    }//GEN-LAST:event_SearchPatientbyAgeActionPerformed

    private void SearchPatientRecordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchPatientRecordButtonActionPerformed
        cards.show(MainCards,"card6");
        SearchByIDField.setText("");
        SearchByIDField.requestFocus();
    }//GEN-LAST:event_SearchPatientRecordButtonActionPerformed

    private void PrintButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrintButtonActionPerformed
        showUpdateDialog();
        showDeleteDialog();
    }//GEN-LAST:event_PrintButtonActionPerformed

    private void notFoundButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_notFoundButtonKeyPressed
        NotFoundPopUp.dispose();
    }//GEN-LAST:event_notFoundButtonKeyPressed

    private void SearchPatientbyDiseaseNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchPatientbyDiseaseNameActionPerformed
        cards.show(MainCards,"card8");
        SearchByDiseaseNameField.setText("");
        SearchByDiseaseNameField.requestFocus();
    }//GEN-LAST:event_SearchPatientbyDiseaseNameActionPerformed

    private void SearchByDiseaseNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchByDiseaseNameFieldActionPerformed
        String diseaseName = SearchByDiseaseNameField.getText();
        searchPatientRecordbyDiseaseName(diseaseName, SearchRecordByDiseaseNameTable);
        SearchByDiseaseNameField.setText("");
        SearchByDiseaseNameField.requestFocus();
    }//GEN-LAST:event_SearchByDiseaseNameFieldActionPerformed

    private void SearchByDiseaseNameFieldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchByDiseaseNameFieldButtonActionPerformed
        String diseaseName = SearchByDiseaseNameField.getText();
        searchPatientRecordbyDiseaseName(diseaseName, SearchRecordByDiseaseNameTable);
        SearchByDiseaseNameField.setText("");
        SearchByDiseaseNameField.requestFocus();
    }//GEN-LAST:event_SearchByDiseaseNameFieldButtonActionPerformed

    private void SearchByDoctorNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchByDoctorNameFieldActionPerformed
        String doctorName = SearchByDoctorNameField.getText();
        String doctorId = Integer.toString(getID("Doctor", "Doctor_ID", "Doctor_Name",doctorName));
        searchPatientRecord("Doctor_ID", doctorId, SearchRecordByDoctorNameTable);   
        SearchByDoctorNameField.setText("");
        SearchByDoctorNameField.requestFocus();
    }//GEN-LAST:event_SearchByDoctorNameFieldActionPerformed

    private void SearchByDoctorNameFieldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchByDoctorNameFieldButtonActionPerformed
        String doctorName = SearchByDoctorNameField.getText();
        String doctorId = Integer.toString(getID("Doctor", "Doctor_ID", "Doctor_Name",doctorName));
        searchPatientRecord("Doctor_ID", doctorId, SearchRecordByDoctorNameTable);   
        SearchByDoctorNameField.setText("");
        SearchByDoctorNameField.requestFocus();
    }//GEN-LAST:event_SearchByDoctorNameFieldButtonActionPerformed

    private void SearchPatientbyDoctorNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchPatientbyDoctorNameActionPerformed
        cards.show(MainCards,"card9");
        SearchByDoctorNameField.setText("");
        SearchByDoctorNameField.requestFocus();
    }//GEN-LAST:event_SearchPatientbyDoctorNameActionPerformed

    private void SearchDoctorByNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchDoctorByNameFieldActionPerformed
        String DocName = SearchDoctorByNameField.getText();
        searchDoctorRecord("Doctor_Name", DocName, SearchDoctorByNameTable);
        SearchDoctorByNameField.setText("");
        SearchDoctorByNameField.requestFocus();
    }//GEN-LAST:event_SearchDoctorByNameFieldActionPerformed

    private void SearchDoctorByNameFieldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchDoctorByNameFieldButtonActionPerformed
        String DocName = SearchDoctorByNameField.getText();
        searchDoctorRecord("Doctor_Name", DocName, SearchDoctorByNameTable);
        SearchDoctorByNameField.setText("");
        SearchDoctorByNameField.requestFocus();
    }//GEN-LAST:event_SearchDoctorByNameFieldButtonActionPerformed

    private void SearchDoctorByFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchDoctorByFieldActionPerformed
        String  field = SearchDoctorByField.getText();  
        String fieldID = Integer.toString(getID("Disease", "Disease_ID", "Disease_Name", field));
        searchDoctorRecord("Disease_ID", fieldID, SearchDoctorbyFieldTable);
        SearchDoctorByField.setText("");
        SearchDoctorByField.requestFocus();
    }//GEN-LAST:event_SearchDoctorByFieldActionPerformed

    private void SearchDoctorByFieldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchDoctorByFieldButtonActionPerformed
        String  field = SearchDoctorByField.getText();  
        String fieldID = Integer.toString(getID("Disease", "Disease_ID", "Disease_Name", field));
        searchDoctorRecord("Disease_ID", fieldID, SearchDoctorbyFieldTable);
        SearchDoctorByField.setText("");
        SearchDoctorByField.requestFocus();
    }//GEN-LAST:event_SearchDoctorByFieldButtonActionPerformed

    private void ID_SearchField_forDeletionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ID_SearchField_forDeletionActionPerformed
        String required = ID_SearchField_forDeletion.getText();
        searchPatientRecord("Patient_ID", required, DeletionByIDTable);
        ID_SearchField_forDeletion.setText("");
        ID_SearchField_forDeletion.requestFocus();
    }//GEN-LAST:event_ID_SearchField_forDeletionActionPerformed

    private void DeleteRecordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteRecordButtonActionPerformed
        int selectedIndex = DeletionByIDTable.getSelectedRow();
        if (selectedIndex != -1) {
            showDeleteDialog();
        } else {
            JOptionPane.showMessageDialog(null, "Please select a record from the Table", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_DeleteRecordButtonActionPerformed

    private void ID_SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ID_SearchButtonActionPerformed
        String required = ID_SearchField_forDeletion.getText();
        searchPatientRecord("Patient_ID", required, DeletionByIDTable);
        ID_SearchField_forDeletion.setText("");
        ID_SearchField_forDeletion.requestFocus();
    }//GEN-LAST:event_ID_SearchButtonActionPerformed

    private void AddRecordButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AddRecordButtonKeyPressed
        RecordAddedVerifier.dispose();
    }//GEN-LAST:event_AddRecordButtonKeyPressed

    private void AddRecordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddRecordButtonActionPerformed
        RecordAddedVerifier.dispose();
    }//GEN-LAST:event_AddRecordButtonActionPerformed

    private void UpdatePatientRecordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdatePatientRecordButtonActionPerformed
        showUpdateDialog();
    }//GEN-LAST:event_UpdatePatientRecordButtonActionPerformed

    private void CancelPatientUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelPatientUpdateActionPerformed
        UpdateRecordDialogPopUp.dispose();
    }//GEN-LAST:event_CancelPatientUpdateActionPerformed

    private void CancelDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelDeleteActionPerformed
        ConfirmDeletePopUp.dispose();
    }//GEN-LAST:event_CancelDeleteActionPerformed

    private void CancelDeleteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CancelDeleteKeyPressed
        ConfirmDeletePopUp.dispose();
    }//GEN-LAST:event_CancelDeleteKeyPressed

    private void ConfirmDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmDeleteActionPerformed
        deletePatientRecord();
        ConfirmDeletePopUp.dispose();
    }//GEN-LAST:event_ConfirmDeleteActionPerformed

    private void ConfirmDeleteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ConfirmDeleteKeyPressed
        deletePatientRecord();
        ConfirmDeletePopUp.dispose();
    }//GEN-LAST:event_ConfirmDeleteKeyPressed

    private void ID_SearchField_forUpdationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ID_SearchField_forUpdationActionPerformed
        String required = ID_SearchField_forUpdation.getText();
        searchPatientRecord("Patient_ID", required, UpdationByIDTable);
        ID_SearchField_forUpdation.setText("");
        ID_SearchField_forUpdation.requestFocus();
    }//GEN-LAST:event_ID_SearchField_forUpdationActionPerformed

    private void UpdateRecordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateRecordButtonActionPerformed
        int selectedIndex = UpdationByIDTable.getSelectedRow();
        if (selectedIndex != -1) {
            getData(selectedIndex);
            showRecordDialog();
            ID_SearchField_forUpdation.requestFocus();
        } else {
            JOptionPane.showMessageDialog(null, "Please select a record from the Table", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_UpdateRecordButtonActionPerformed

    private void ID_SearchButton_forUpdationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ID_SearchButton_forUpdationActionPerformed
        String required = ID_SearchField_forUpdation.getText();
        searchPatientRecord("Patient_ID", required, UpdationByIDTable);
        ID_SearchField_forUpdation.setText("");
        ID_SearchField_forUpdation.requestFocus();
    }//GEN-LAST:event_ID_SearchButton_forUpdationActionPerformed

    private void CancelUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelUpdateActionPerformed
        UpdateRecordDialogPopUp.dispose();
        ConfirmUpdatePopUp.dispose();
    }//GEN-LAST:event_CancelUpdateActionPerformed

    private void CancelUpdateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CancelUpdateKeyPressed
        UpdateRecordDialogPopUp.dispose();
        ConfirmUpdatePopUp.dispose();
    }//GEN-LAST:event_CancelUpdateKeyPressed

    private void ConfirmUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmUpdateActionPerformed
        updatePatientRecord();
        String id = String.valueOf(ID);
        searchPatientRecord("Patient_ID", id, UpdationByIDTable);
        UpdateRecordDialogPopUp.dispose();
        ConfirmUpdatePopUp.dispose();
    }//GEN-LAST:event_ConfirmUpdateActionPerformed

    private void ConfirmUpdateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ConfirmUpdateKeyPressed
        updatePatientRecord();
        String id = String.valueOf(ID);
        searchPatientRecord("Patient_ID", id, UpdationByIDTable);
        UpdateRecordDialogPopUp.dispose();
        ConfirmUpdatePopUp.dispose();
    }//GEN-LAST:event_ConfirmUpdateKeyPressed

    private void Update_PatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Update_PatientActionPerformed
        cards.show(MainCards,"card13");
        ID_SearchField_forUpdation.requestFocus();
    }//GEN-LAST:event_Update_PatientActionPerformed

    private void SaveDoctor1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveDoctor1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SaveDoctor1ActionPerformed

    private void Delete_PatientRecordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_PatientRecordButtonActionPerformed
        cards.show(MainCards,"card12");
        ID_SearchField_forDeletion.requestFocus();
    }//GEN-LAST:event_Delete_PatientRecordButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ADCDoctorNameField;
    private javax.swing.JPanel ADCDoctorNameField1;
    private javax.swing.JLabel ADCDoctorNameLabel;
    private javax.swing.JLabel ADCDoctorNameLabel2;
    private javax.swing.JLabel ADCDoctorNameLabel3;
    private javax.swing.JPanel ADCleft;
    private javax.swing.JPanel ADisC;
    private javax.swing.JTextArea ADisC_DiseaseDescriptionField;
    private javax.swing.JLabel ADisC_DiseaseDescriptionLabel;
    private javax.swing.JTextField ADisC_DiseaseNameField;
    private javax.swing.JLabel ADisC_DiseaseNameLabel;
    private javax.swing.JPanel ADisLeft;
    private javax.swing.JPanel ADisRight;
    private javax.swing.JPanel ADocC;
    private javax.swing.JPanel APC;
    private javax.swing.JMenuItem AboutUs;
    private javax.swing.JMenuItem AddNewDisease;
    private javax.swing.JMenuItem AddNewDoctor;
    private MyButton AddNewDoctorButton;
    private javax.swing.JMenuItem AddNewPatient;
    private MyButton AddNewPatientButton;
    private javax.swing.JButton AddRecordButton;
    private javax.swing.JButton CancelDelete;
    private MyButton CancelDisease;
    private MyButton CancelDoctor;
    private MyButton CancelDoctor1;
    private MyButton CancelPatient;
    private MyButton CancelPatientUpdate;
    private javax.swing.JButton CancelUpdate;
    private javax.swing.JMenuItem ChangePassword;
    private javax.swing.JButton ConfirmDelete;
    private javax.swing.JDialog ConfirmDeletePopUp;
    private javax.swing.JButton ConfirmUpdate;
    private javax.swing.JDialog ConfirmUpdatePopUp;
    private javax.swing.JTextField DOB;
    private com.toedter.calendar.JDateChooser DateofBirthField;
    private javax.swing.JLabel DateofBirthLabel;
    private javax.swing.JLabel DateofBirthLabel1;
    private javax.swing.JMenuItem DeletePatientRecord;
    private javax.swing.JPanel DeletePatientRecordPanel;
    private MyButton DeleteRecordButton;
    private MyButton Delete_PatientRecordButton;
    private javax.swing.JTable DeletionByIDTable;
    private javax.swing.JScrollPane DiseaseHistroyField;
    private javax.swing.JScrollPane DiseaseHistroyField1;
    private javax.swing.JLabel DiseaseHistroyLabel;
    private javax.swing.JLabel DiseaseHistroyLabel1;
    private javax.swing.JTextArea Disease_Histroy;
    private javax.swing.JTextArea Disease_Histroy1;
    private javax.swing.JComboBox<String> DoctorNameField;
    private javax.swing.JLabel DoctorNameLabel;
    private javax.swing.JLabel DoctorNameLabel1;
    private javax.swing.JTextField FatherNameField;
    private javax.swing.JLabel FatherNameLabel;
    private javax.swing.JLabel FatherNameLabel1;
    private javax.swing.JRadioButton Female;
    private javax.swing.JComboBox<String> FieldofSpecializationField;
    private javax.swing.JComboBox<String> FieldofSpecializationField1;
    private javax.swing.JLabel FieldofSpecializationLabel;
    private javax.swing.JLabel FieldofSpecializationLabel1;
    private javax.swing.JPanel GC;
    private javax.swing.JLabel Gender;
    private javax.swing.JLabel Gender1;
    private javax.swing.JMenu Helpmenu;
    private MyButton ID_SearchButton;
    private MyButton ID_SearchButton_forUpdation;
    private javax.swing.JTextField ID_SearchField_forDeletion;
    private javax.swing.JTextField ID_SearchField_forUpdation;
    private javax.swing.JPanel Left;
    private MyButton LogOut;
    private javax.swing.JPanel LogOutButton;
    private javax.swing.JPanel MainCards;
    private javax.swing.JRadioButton Male;
    private javax.swing.JMenu ManageRecord;
    private javax.swing.JDialog NotFoundPopUp;
    private javax.swing.JTextField PatientNameField;
    private javax.swing.JLabel PatientNameLabel;
    private javax.swing.JLabel PatientNameLabel1;
    private javax.swing.JTextArea Prescription;
    private javax.swing.JTextArea Prescription1;
    private javax.swing.JScrollPane PrescriptionField;
    private javax.swing.JLabel PrescriptionLabel;
    private javax.swing.JLabel PrescriptionLabel1;
    private MyButton PrintButton;
    private javax.swing.JDialog RecordAddedVerifier;
    private javax.swing.JPanel Right;
    private MyButton SaveDisease;
    private MyButton SaveDoctor;
    private MyButton SaveDoctor1;
    private MyButton SavePatient;
    private javax.swing.JTextField SearchByAgeField;
    private javax.swing.JTextField SearchByDiseaseNameField;
    private MyButton SearchByDiseaseNameFieldButton;
    private javax.swing.JTextField SearchByDoctorNameField;
    private MyButton SearchByDoctorNameFieldButton;
    private javax.swing.JTextField SearchByIDField;
    private javax.swing.JTextField SearchByNameField;
    private javax.swing.JLabel SearchByNameLabel;
    private javax.swing.JTable SearchByNameTable;
    private javax.swing.JTextField SearchDoctorByField;
    private MyButton SearchDoctorByFieldButton;
    private javax.swing.JTextField SearchDoctorByNameField;
    private MyButton SearchDoctorByNameFieldButton;
    private javax.swing.JTable SearchDoctorByNameTable;
    private javax.swing.JMenuItem SearchDoctorbyDiseaseSpecialization;
    private javax.swing.JPanel SearchDoctorbyFieldPanel;
    private javax.swing.JTable SearchDoctorbyFieldTable;
    private javax.swing.JMenuItem SearchDoctorbyName;
    private javax.swing.JPanel SearchDoctorbyNamePanel;
    private MyButton SearchPatientByNameButton;
    private MyButton SearchPatientRecordButton;
    private javax.swing.JMenuItem SearchPatientbyAge;
    private javax.swing.JMenuItem SearchPatientbyDiseaseName;
    private javax.swing.JMenuItem SearchPatientbyDoctorName;
    private javax.swing.JMenuItem SearchPatientbyID;
    private javax.swing.JMenuItem SearchPatientbyName;
    private javax.swing.JMenu SearchRecord;
    private MyButton SearchRecordByAgeButton;
    private javax.swing.JLabel SearchRecordByAgeLabel;
    private javax.swing.JPanel SearchRecordByAgePanel;
    private javax.swing.JTable SearchRecordByAgeTable;
    private javax.swing.JLabel SearchRecordByDiseaseNaemLabel;
    private javax.swing.JLabel SearchRecordByDiseaseNaemLabel1;
    private javax.swing.JLabel SearchRecordByDiseaseNaemLabel2;
    private javax.swing.JLabel SearchRecordByDiseaseNaemLabel3;
    private javax.swing.JLabel SearchRecordByDiseaseNaemLabel4;
    private javax.swing.JLabel SearchRecordByDiseaseNaemLabel5;
    private javax.swing.JPanel SearchRecordByDiseaseNamePanel;
    private javax.swing.JTable SearchRecordByDiseaseNameTable;
    private javax.swing.JPanel SearchRecordByDoctorNamePanel;
    private javax.swing.JTable SearchRecordByDoctorNameTable;
    private MyButton SearchRecordByIDButton;
    private javax.swing.JLabel SearchRecordByIDLabel;
    private javax.swing.JPanel SearchRecordByIDPanel;
    private javax.swing.JTable SearchRecordByIDTable;
    private javax.swing.JPanel SearchRecordByNamePanel;
    private javax.swing.ButtonGroup Sex;
    private javax.swing.JPanel ToolBar;
    private javax.swing.JPanel ToolBarButtons;
    private javax.swing.JScrollPane UpdateDiseaseHistroyField;
    private javax.swing.JDialog UpdateDoctorDialogPopUp;
    private javax.swing.JMenuItem UpdateDoctorRecord;
    private javax.swing.JTextField UpdateFatherNameField;
    private javax.swing.JTextField UpdateFatherNameField1;
    private javax.swing.JTextField UpdatePatientNameField;
    private javax.swing.JMenuItem UpdatePatientRecord;
    private MyButton UpdatePatientRecordButton;
    private javax.swing.JPanel UpdatePatientRecordPanel;
    private javax.swing.JScrollPane UpdatePrescriptionField;
    private javax.swing.JMenu UpdateRecord;
    private MyButton UpdateRecordButton;
    private javax.swing.JDialog UpdateRecordDialogPopUp;
    private MyButton Update_Patient;
    private javax.swing.JTable UpdationByIDTable;
    private javax.swing.JPanel Welcome;
    private javax.swing.JTextField addDoc_DoctorNameField;
    private javax.swing.JTextField addDoc_DoctorNameField1;
    private javax.swing.JTextField gender;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JButton notFoundButton;
    // End of variables declaration//GEN-END:variables

    private void AddRecordVerifier() {
        RecordAddedVerifier.setModal(true);
        RecordAddedVerifier.setSize(400, 200);
        RecordAddedVerifier.setLocationRelativeTo(null);
        RecordAddedVerifier.setVisible(true);
        AddRecordButton.requestFocus();
    }
    
    private void NotFound() {
        NotFoundPopUp.setModal(true);
        NotFoundPopUp.setSize(400, 200);
        NotFoundPopUp.setLocationRelativeTo(null);
        NotFoundPopUp.setVisible(true);   
        notFoundButton.requestFocus();
    }
    
    private void showRecordDialog() {
        UpdateRecordDialogPopUp.setModal(true);
        UpdateRecordDialogPopUp.setSize(680, 630);
        UpdateRecordDialogPopUp.setLocationRelativeTo(null);
        UpdateRecordDialogPopUp.setVisible(true); 
    }
    
    private void showDeleteDialog() {
        ConfirmDeletePopUp.setModal(true);
        ConfirmDeletePopUp.setSize(450, 250);
        ConfirmDeletePopUp.setLocationRelativeTo(null);
        ConfirmDeletePopUp.setVisible(true); 
    }
    
    private void showUpdateDialog() {
        ConfirmUpdatePopUp.setModal(true);
        ConfirmUpdatePopUp.setSize(450, 250);
        ConfirmUpdatePopUp.setLocationRelativeTo(null);
        ConfirmUpdatePopUp.setVisible(true); 
    }
    
    private void updateComboBoxes() {
        updateComboBoxWhere("Doctor", "Doctor_Name", DoctorNameField);
        updateComboBoxWhere("Disease", "Disease_Name", FieldofSpecializationField);
    }
    
    private void updateComboBoxWhere(String tableName, String tableColumn,JComboBox outputBox) {
        try
        { 
            Connection conn = null;
            Statement  stmt = null;
            ResultSet rs = null;

            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");

            String DB = "Database\\Library System.accdb";
            String URL = "jdbc:ucanaccess://"+DB;

            conn = DriverManager.getConnection(URL);
            String query = "SELECT "+tableColumn+" FROM "+ tableName;
            stmt = conn.createStatement();
            rs = stmt.executeQuery(query);
            
            outputBox.removeAllItems();
            while (rs.next()) {
                outputBox.addItem(rs.getString(tableColumn));
            }
            
            conn.close();
            rs.close();
            stmt.close();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this,e.getMessage());
        }
    }

    private int getID(String tableName, String tableColumn,String attribute, String requiredValue) {
        int id = 0;
        try
        { 
            Connection conn = null;
            PreparedStatement  stmt = null;
            ResultSet rs = null;

            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");

            String DB = "Database\\Library System.accdb";
            String URL = "jdbc:ucanaccess://"+DB;

            conn = DriverManager.getConnection(URL);
            String query = "SELECT "+tableColumn+" FROM "+tableName+" WHERE "+attribute+"=?";
            stmt = conn.prepareStatement(query);
            stmt.setString(1,requiredValue);

            rs = stmt.executeQuery();
            if(rs.next()){
                id = rs.getInt(tableColumn);
            }

            conn.close();
            stmt.close();
        }
        catch(Exception e)
        {
//            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(this,e.getMessage());
        }
        return id;
    }
    
    public void addPatientRecord() {
        String selectedDoctorName = (String) DoctorNameField.getSelectedItem();
        int doctorId = getID("Doctor", "Doctor_ID", "Doctor_Name",selectedDoctorName);
        try
        {
            String p_name = PatientNameField.getText();
            String f_name = FatherNameField.getText();
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy");
            String dob = dateFormat.format(DateofBirthField.getDate());
            
            String gender;
            if(Male.isSelected())
            {
                gender = Male.getText();
            }
            else if(Female.isSelected())
            {
                gender = Female.getText();
            }
            else
            {
                throw new Exception("Please Select your Gender");
            }
            
            String disease_histroy = Disease_Histroy.getText();
            String prescription = Prescription.getText();

            Connection conn = null;
            PreparedStatement stmt = null;

            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");

            String DB = "Database\\Library System.accdb";
            String URL = "jdbc:ucanaccess://"+DB;

            conn = DriverManager.getConnection(URL);
            String query = "INSERT INTO Patient " +
                           "(Patient_Name, PF_Name, Sex, DOB, Doctor_ID, Disease_History, Prescription) " +
                           "VALUES (?, ?, ?, ?, ?, ?, ?)";

            stmt = conn.prepareStatement(query);
            stmt.setString(1, p_name);
            stmt.setString(2, f_name);
            stmt.setString(3, gender);
            stmt.setString(4, dob);
            stmt.setInt(5, doctorId);
            stmt.setString(6, disease_histroy);
            stmt.setString(7, prescription);
            stmt.executeUpdate();
            AddRecordVerifier();

            conn.close();
            stmt.close();
        }
        catch(Exception e)
        {
//            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(this,e.getMessage());
        }
    }
    
    private void addDiseaseRecord() {
        try
        {
            String d_name = ADisC_DiseaseNameField.getText();
            String d_disc = ADisC_DiseaseDescriptionField.getText();
           
            Connection conn = null;
            PreparedStatement stmt = null;

            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");

            String DB = "Database\\Library System.accdb";
            String URL = "jdbc:ucanaccess://"+DB;

            conn = DriverManager.getConnection(URL);
            String query = "INSERT INTO Disease " +
                           "(Disease_Name, Disease_Description) " +
                           "VALUES (?, ?)";

            stmt = conn.prepareStatement(query);
            stmt.setString(1,d_name);
            stmt.setString(2,d_disc);
            stmt.executeUpdate();
            AddRecordVerifier();
            
            conn.close();
            stmt.close();
            
            ADisC_DiseaseNameField.setText("");
            ADisC_DiseaseDescriptionField.setText("");
            
            ADisC_DiseaseNameField.requestFocus();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this,e.getMessage());
        }
    }
    
    private void addDoctorRecord() {
        String selectedDisease = (String) FieldofSpecializationField.getSelectedItem();
        int diseaseID = getID("Disease", "Disease_ID", "Disease_Name", selectedDisease);
        String doc_name = addDoc_DoctorNameField.getText();

        try
        {
            Connection conn = null;
            PreparedStatement stmt = null;

            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");

            String DB = "Database\\Library System.accdb";
            String URL = "jdbc:ucanaccess://"+DB;

            conn = DriverManager.getConnection(URL);
            String query = "INSERT INTO Doctor " +
                           "(Disease_ID, Doctor_Name) " +
                           "VALUES (?, ?)";

            stmt = conn.prepareStatement(query);
            stmt.setInt(1,diseaseID);
            stmt.setString(2,doc_name);
            stmt.executeUpdate();
            AddRecordVerifier();

            conn.close();
            stmt.close();

            addDoc_DoctorNameField.setText("");
            FieldofSpecializationField.setSelectedIndex(0);

            addDoc_DoctorNameField.requestFocus();
        }
        catch(Exception e)
        {
//            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(this,e.getMessage());
        }
    }
    
    private void searchPatientRecord(String tableColumn, String requiredItem, JTable outputTable) {
        try
        { 
            Connection conn = null;
            PreparedStatement  stmt = null;
            ResultSet rs = null;

            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");

            String DB = "Database\\Library System.accdb";
            String URL = "jdbc:ucanaccess://"+DB;

            conn = DriverManager.getConnection(URL);
            String query;
            
            switch (tableColumn) {
                case "patient_age":
                    query = "SELECT Patient_ID, Patient_Name, PF_Name, Sex, DOB, Doctor_ID, Disease_History, Prescription," +
                            " DATEDIFF('yyyy', DOB, Date()) AS patient_age FROM Patient WHERE DATEDIFF('yyyy', DOB, Date()) = ?";
                    break;
                    
                default:
                    query = "SELECT * FROM Patient WHERE " + tableColumn + "=?";
            }
            
            stmt = conn.prepareStatement(query);
        
            try {
                stmt.setString(1,requiredItem);
            } 
            catch (Exception e) {
                throw new Exception("Please enter input in Numeric");
            }
             
            rs = stmt.executeQuery();
            
            int rowCount = 0;
            ResultSetMetaData rad = rs.getMetaData();
            int column = rad.getColumnCount();
            DefaultTableModel dft = (DefaultTableModel) outputTable.getModel();
            dft.setRowCount(0);
            
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy");
            
            while (rs.next()) {
                rowCount++;
                Vector section = new Vector();
                for(int i=0 ; i<column ; i++)
                {
                    section.add(rs.getString("Patient_ID"));
                    section.add(rs.getString("Patient_Name"));
                    section.add(rs.getString("PF_Name"));
                    section.add(rs.getString("Sex"));
                    section.add(dateFormat.format(rs.getDate("DOB")));
                    section.add(rs.getString("Doctor_ID"));
                    section.add(rs.getString("Disease_History"));
                    section.add(rs.getString("Prescription"));
                }
                dft.addRow(section);
            }
            
            outputTable.getColumnModel().getColumn(6).setCellRenderer(new TextAreaRenderer());
            outputTable.getColumnModel().getColumn(7).setCellRenderer(new TextAreaRenderer());
            
            if (rowCount == 0) {
                NotFound();
            }

            conn.close();
            rs.close();
            stmt.close();
        } 
        catch (Exception e) {
//            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    } 
    
    private void searchPatientRecordbyDiseaseName(String requiredItem, JTable outputTable) {
        try
        { 
            Connection conn = null;
            PreparedStatement  stmt = null;
            ResultSet rs = null;

            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");

            String DB = "Database\\Library System.accdb";
            String URL = "jdbc:ucanaccess://"+DB;

            conn = DriverManager.getConnection(URL);
            String query;

            query = "SELECT Patient.Patient_ID, Patient.Patient_Name, Patient.PF_Name, Patient.Sex, Patient.DOB, Doctor.Doctor_Name, Patient.Disease_History, Patient.Prescription " 
                    + "FROM Patient " 
                    + "INNER JOIN Doctor ON Patient.Doctor_ID=Doctor.Doctor_ID " 
                    + "INNER JOIN Disease ON Doctor.Disease_ID=Disease.Disease_ID " 
                    + "WHERE Disease.Disease_Name=?";
            
            stmt = conn.prepareStatement(query);
        
            try {
                stmt.setString(1,requiredItem);
            } 
            catch (Exception e) {
                throw new Exception("Please enter input in Numeric");
            }
             
            rs = stmt.executeQuery();
            
            int rowCount = 0;
            ResultSetMetaData rad = rs.getMetaData();
            int column = rad.getColumnCount();
            DefaultTableModel dft = (DefaultTableModel) outputTable.getModel();
            dft.setRowCount(0);
            
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy");
            
            while (rs.next()) {
                rowCount++;
                Vector section = new Vector();
                for(int i=0 ; i<column ; i++)
                {
                    section.add(rs.getString("Patient_ID"));
                    section.add(rs.getString("Patient_Name"));
                    section.add(rs.getString("PF_Name"));
                    section.add(rs.getString("Sex"));
                    section.add(dateFormat.format(rs.getDate("DOB")));
                    section.add(rs.getString("Doctor_Name"));
                    section.add(rs.getString("Disease_History"));
                    section.add(rs.getString("Prescription"));
                }
                dft.addRow(section);
            }
            
            outputTable.getColumnModel().getColumn(6).setCellRenderer(new TextAreaRenderer());
            outputTable.getColumnModel().getColumn(7).setCellRenderer(new TextAreaRenderer());
            
            if (rowCount == 0) {
                NotFound();
            }

            conn.close();
            rs.close();
            stmt.close();
        } 
        catch (Exception e) {
//            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }
    
    private void searchDoctorRecord(String tableColumn, String requiredItem, JTable outputTable) {
        outputTable.setRowHeight(30);
        try
        { 
            Connection conn = null;
            PreparedStatement  stmt = null;
            ResultSet rs = null;

            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");

            String DB = "Database\\Library System.accdb";
            String URL = "jdbc:ucanaccess://"+DB;

            conn = DriverManager.getConnection(URL);
            String query;

            query = "SELECT * FROM Doctor WHERE " + tableColumn + "=?";

            
            stmt = conn.prepareStatement(query);
        
            try {
                stmt.setString(1,requiredItem);
            } 
            catch (Exception e) {
                throw new Exception("Please enter input in Numeric");
            }
             
            rs = stmt.executeQuery();
            
            int rowCount = 0;
            ResultSetMetaData rad = rs.getMetaData();
            int column = rad.getColumnCount();
            DefaultTableModel dft = (DefaultTableModel) outputTable.getModel();
            dft.setRowCount(0);
            
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy");
            
            while (rs.next()) {
                rowCount++;
                Vector section = new Vector();
                for(int i=0 ; i<column ; i++)
                {
                    section.add(rs.getString("Doctor_ID"));
                    section.add(rs.getString("Disease_ID"));
                    section.add(rs.getString("Doctor_Name"));
                }
                dft.addRow(section);
            }
            
            if (rowCount == 0) {
                NotFound();
            }

            conn.close();
            rs.close();
            stmt.close();
        } 
        catch (Exception e) {
//            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    } 
    
    private void deletePatientRecord() {
        DefaultTableModel dft = (DefaultTableModel) DeletionByIDTable.getModel();
        int selectedIndex = DeletionByIDTable.getSelectedRow();
        
        int ID = Integer.parseInt(dft.getValueAt(selectedIndex,0).toString());
        
         try
        { 
            Connection conn = null;
            PreparedStatement  stmt = null;

            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");

            String DB = "Database\\Library System.accdb";
            String URL = "jdbc:ucanaccess://"+DB;

            conn = DriverManager.getConnection(URL);
            String query;

            query = "DELETE FROM Patient WHERE Patient_ID=?";

            
            stmt = conn.prepareStatement(query);
            stmt.setInt(1,ID);
             
            stmt.executeUpdate();
            
            conn.close();
            stmt.close();
            
            dft.setRowCount(0);
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
//            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }
    
    int ID;
    private void updatePatientRecord() {
        String diseaseHistory = Disease_Histroy1.getText();
        String prescription = Prescription1.getText();
        
         try
        { 
            Connection conn = null;
            PreparedStatement  stmt = null;

            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");

            String DB = "Database\\Library System.accdb";
            String URL = "jdbc:ucanaccess://"+DB;

            conn = DriverManager.getConnection(URL);
            String query;

            query = "UPDATE Patient SET Disease_History=?,Prescription=? WHERE Patient_ID=?";

            
            stmt = conn.prepareStatement(query);
            stmt.setString(1,diseaseHistory);
            stmt.setString(2,prescription);
            stmt.setInt(3,ID);
             
            stmt.executeUpdate();
            
            conn.close();
            stmt.close();
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
//            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }
    
    private void getData(int selectedIndex) {
        String valueAsString = (String) UpdationByIDTable.getValueAt(selectedIndex, 0).toString();
        ID = Integer.parseInt(valueAsString);
        UpdatePatientNameField.setText(UpdationByIDTable.getValueAt(selectedIndex,1).toString());   
        UpdateFatherNameField.setText(UpdationByIDTable.getValueAt(selectedIndex,2).toString());
        gender.setText(UpdationByIDTable.getValueAt(selectedIndex,3).toString());
        DOB.setText(UpdationByIDTable.getValueAt(selectedIndex,4).toString());
        UpdateFatherNameField1.setText(UpdationByIDTable.getValueAt(selectedIndex,5).toString());
        Disease_Histroy1.setText(UpdationByIDTable.getValueAt(selectedIndex,6).toString());
        Prescription1.setText(UpdationByIDTable.getValueAt(selectedIndex,7).toString());
    }
    
}


// ---------   X-tra classes to some visual improvements

class TextAreaRenderer extends JTextArea implements TableCellRenderer {
    public TextAreaRenderer() {
        setLineWrap(true);
        setWrapStyleWord(true);
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value,
            boolean isSelected, boolean hasFocus, int row, int column) {
        setText((value == null) ? "" : value.toString());
        setSize(table.getColumnModel().getColumn(column).getWidth(), getPreferredSize().height);
        if (table.getRowHeight(row) != getPreferredSize().height) {
            table.setRowHeight(row, getPreferredSize().height);
        }
        if (isSelected) {
            setBackground(table.getSelectionBackground());
            setForeground(table.getSelectionForeground());
        } else {
            setBackground(table.getBackground());
            setForeground(table.getForeground());
        }
        setFont(getFont().deriveFont(Font.PLAIN, 15));
        return this;
    }
}

